
drillboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004144  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004308  08004308  00005308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004318  08004318  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004318  08004318  00005318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004320  08004320  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004320  08004320  00005320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004324  08004324  00005324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004328  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000000c  08004334  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08004334  000061ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c53c  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a1  00000000  00000000  00012578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00014620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000948  00000000  00000000  00015230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002230a  00000000  00000000  00015b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e772  00000000  00000000  00037e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d13f8  00000000  00000000  000465f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001179ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b0  00000000  00000000  00117a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0011abe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080042f0 	.word	0x080042f0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080042f0 	.word	0x080042f0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004fa:	4b35      	ldr	r3, [pc, #212]	@ (80005d0 <MX_CAN1_Init+0xdc>)
 80004fc:	4a35      	ldr	r2, [pc, #212]	@ (80005d4 <MX_CAN1_Init+0xe0>)
 80004fe:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000500:	4b33      	ldr	r3, [pc, #204]	@ (80005d0 <MX_CAN1_Init+0xdc>)
 8000502:	2202      	movs	r2, #2
 8000504:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000506:	4b32      	ldr	r3, [pc, #200]	@ (80005d0 <MX_CAN1_Init+0xdc>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800050c:	4b30      	ldr	r3, [pc, #192]	@ (80005d0 <MX_CAN1_Init+0xdc>)
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000512:	4b2f      	ldr	r3, [pc, #188]	@ (80005d0 <MX_CAN1_Init+0xdc>)
 8000514:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000518:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800051a:	4b2d      	ldr	r3, [pc, #180]	@ (80005d0 <MX_CAN1_Init+0xdc>)
 800051c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000520:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000522:	4b2b      	ldr	r3, [pc, #172]	@ (80005d0 <MX_CAN1_Init+0xdc>)
 8000524:	2200      	movs	r2, #0
 8000526:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000528:	4b29      	ldr	r3, [pc, #164]	@ (80005d0 <MX_CAN1_Init+0xdc>)
 800052a:	2200      	movs	r2, #0
 800052c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800052e:	4b28      	ldr	r3, [pc, #160]	@ (80005d0 <MX_CAN1_Init+0xdc>)
 8000530:	2200      	movs	r2, #0
 8000532:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000534:	4b26      	ldr	r3, [pc, #152]	@ (80005d0 <MX_CAN1_Init+0xdc>)
 8000536:	2201      	movs	r2, #1
 8000538:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800053a:	4b25      	ldr	r3, [pc, #148]	@ (80005d0 <MX_CAN1_Init+0xdc>)
 800053c:	2200      	movs	r2, #0
 800053e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000540:	4b23      	ldr	r3, [pc, #140]	@ (80005d0 <MX_CAN1_Init+0xdc>)
 8000542:	2200      	movs	r2, #0
 8000544:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000546:	4822      	ldr	r0, [pc, #136]	@ (80005d0 <MX_CAN1_Init+0xdc>)
 8000548:	f001 f84e 	bl	80015e8 <HAL_CAN_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000552:	f000 fae3 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef sFilterConfig;

    sFilterConfig.FilterBank = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800055e:	2301      	movs	r3, #1
 8000560:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 8000562:	2300      	movs	r3, #0
 8000564:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000572:	2300      	movs	r3, #0
 8000574:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8000576:	2301      	movs	r3, #1
 8000578:	623b      	str	r3, [r7, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 800057a:	230e      	movs	r3, #14
 800057c:	627b      	str	r3, [r7, #36]	@ 0x24

    	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	4619      	mov	r1, r3
 8000582:	4813      	ldr	r0, [pc, #76]	@ (80005d0 <MX_CAN1_Init+0xdc>)
 8000584:	f001 f92c 	bl	80017e0 <HAL_CAN_ConfigFilter>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_CAN1_Init+0x9e>
    	{
    	    Error_Handler();
 800058e:	f000 fac5 	bl	8000b1c <Error_Handler>
    	}
    	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK)
 8000592:	2102      	movs	r1, #2
 8000594:	480e      	ldr	r0, [pc, #56]	@ (80005d0 <MX_CAN1_Init+0xdc>)
 8000596:	f001 fb69 	bl	8001c6c <HAL_CAN_ActivateNotification>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_CAN1_Init+0xb0>
    	{
    		Error_Handler();
 80005a0:	f000 fabc 	bl	8000b1c <Error_Handler>
    	}
    	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!=HAL_OK)
 80005a4:	2110      	movs	r1, #16
 80005a6:	480a      	ldr	r0, [pc, #40]	@ (80005d0 <MX_CAN1_Init+0xdc>)
 80005a8:	f001 fb60 	bl	8001c6c <HAL_CAN_ActivateNotification>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_CAN1_Init+0xc2>
    	{
    		Error_Handler();
 80005b2:	f000 fab3 	bl	8000b1c <Error_Handler>
      }
      if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80005b6:	4806      	ldr	r0, [pc, #24]	@ (80005d0 <MX_CAN1_Init+0xdc>)
 80005b8:	f001 f9f2 	bl	80019a0 <HAL_CAN_Start>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_CAN1_Init+0xd2>
    	{
    	Error_Handler ();
 80005c2:	f000 faab 	bl	8000b1c <Error_Handler>
    	}
  /* USER CODE END CAN1_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	3728      	adds	r7, #40	@ 0x28
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000054 	.word	0x20000054
 80005d4:	40006400 	.word	0x40006400

080005d8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	@ 0x28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a32      	ldr	r2, [pc, #200]	@ (80006c0 <HAL_CAN_MspInit+0xe8>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d15d      	bne.n	80006b6 <HAL_CAN_MspInit+0xde>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	4b31      	ldr	r3, [pc, #196]	@ (80006c4 <HAL_CAN_MspInit+0xec>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000602:	4a30      	ldr	r2, [pc, #192]	@ (80006c4 <HAL_CAN_MspInit+0xec>)
 8000604:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000608:	6413      	str	r3, [r2, #64]	@ 0x40
 800060a:	4b2e      	ldr	r3, [pc, #184]	@ (80006c4 <HAL_CAN_MspInit+0xec>)
 800060c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	4b2a      	ldr	r3, [pc, #168]	@ (80006c4 <HAL_CAN_MspInit+0xec>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	4a29      	ldr	r2, [pc, #164]	@ (80006c4 <HAL_CAN_MspInit+0xec>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	@ 0x30
 8000626:	4b27      	ldr	r3, [pc, #156]	@ (80006c4 <HAL_CAN_MspInit+0xec>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000632:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000638:	2302      	movs	r3, #2
 800063a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800063c:	2301      	movs	r3, #1
 800063e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000640:	2303      	movs	r3, #3
 8000642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000644:	2309      	movs	r3, #9
 8000646:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4619      	mov	r1, r3
 800064e:	481e      	ldr	r0, [pc, #120]	@ (80006c8 <HAL_CAN_MspInit+0xf0>)
 8000650:	f001 fe74 	bl	800233c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000654:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065a:	2302      	movs	r3, #2
 800065c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000662:	2303      	movs	r3, #3
 8000664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000666:	2309      	movs	r3, #9
 8000668:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4815      	ldr	r0, [pc, #84]	@ (80006c8 <HAL_CAN_MspInit+0xf0>)
 8000672:	f001 fe63 	bl	800233c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 2, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2102      	movs	r1, #2
 800067a:	2013      	movs	r0, #19
 800067c:	f001 fe27 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000680:	2013      	movs	r0, #19
 8000682:	f001 fe40 	bl	8002306 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2102      	movs	r1, #2
 800068a:	2014      	movs	r0, #20
 800068c:	f001 fe1f 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000690:	2014      	movs	r0, #20
 8000692:	f001 fe38 	bl	8002306 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2102      	movs	r1, #2
 800069a:	2015      	movs	r0, #21
 800069c:	f001 fe17 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80006a0:	2015      	movs	r0, #21
 80006a2:	f001 fe30 	bl	8002306 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 2, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2102      	movs	r1, #2
 80006aa:	2016      	movs	r0, #22
 80006ac:	f001 fe0f 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80006b0:	2016      	movs	r0, #22
 80006b2:	f001 fe28 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006b6:	bf00      	nop
 80006b8:	3728      	adds	r7, #40	@ 0x28
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40006400 	.word	0x40006400
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40020400 	.word	0x40020400

080006cc <HAL_CAN_RxFifo0MsgPendingCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80006d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80006d6:	4a20      	ldr	r2, [pc, #128]	@ (8000758 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80006d8:	2100      	movs	r1, #0
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f001 f9a4 	bl	8001a28 <HAL_CAN_GetRxMessage>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 80006e6:	f000 fa19 	bl	8000b1c <Error_Handler>
  }

  if(RxHeader.StdId== 203)
 80006ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2bcb      	cmp	r3, #203	@ 0xcb
 80006f0:	d11d      	bne.n	800072e <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
  {
	  //opuszczanie wiertła
	  direction[0]=RxData[0];
 80006f2:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	b25a      	sxtb	r2, r3
 80006f8:	4b18      	ldr	r3, [pc, #96]	@ (800075c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 80006fa:	701a      	strb	r2, [r3, #0]
	  direction[1]=RxData[1];
 80006fc:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80006fe:	785b      	ldrb	r3, [r3, #1]
 8000700:	b25a      	sxtb	r2, r3
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8000704:	705a      	strb	r2, [r3, #1]
	  direction[2]=RxData[2];
 8000706:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000708:	789b      	ldrb	r3, [r3, #2]
 800070a:	b25a      	sxtb	r2, r3
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 800070e:	709a      	strb	r2, [r3, #2]
	  speed[0]=RxData[3];
 8000710:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000712:	78db      	ldrb	r3, [r3, #3]
 8000714:	b25a      	sxtb	r2, r3
 8000716:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000718:	701a      	strb	r2, [r3, #0]
	  speed[0]=RxData[4];
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 800071c:	791b      	ldrb	r3, [r3, #4]
 800071e:	b25a      	sxtb	r2, r3
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000722:	701a      	strb	r2, [r3, #0]
	  speed[0]=RxData[5];
 8000724:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000726:	795b      	ldrb	r3, [r3, #5]
 8000728:	b25a      	sxtb	r2, r3
 800072a:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 800072c:	701a      	strb	r2, [r3, #0]
  }
  if(RxHeader.StdId== 204)
 800072e:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2bcc      	cmp	r3, #204	@ 0xcc
 8000734:	d104      	bne.n	8000740 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
  {
	  //wiercenie
	  direction[1]=RxData[0]; // od 50 do 100
 8000736:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b25a      	sxtb	r2, r3
 800073c:	4b07      	ldr	r3, [pc, #28]	@ (800075c <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 800073e:	705a      	strb	r2, [r3, #1]
  }
  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000740:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000744:	4807      	ldr	r0, [pc, #28]	@ (8000764 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000746:	f001 ffbe 	bl	80026c6 <HAL_GPIO_TogglePin>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000044 	.word	0x20000044
 8000758:	20000028 	.word	0x20000028
 800075c:	20000050 	.word	0x20000050
 8000760:	2000004c 	.word	0x2000004c
 8000764:	40020800 	.word	0x40020800

08000768 <HAL_GPIO_EXTI_Callback>:
/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	80fb      	strh	r3, [r7, #6]
    uint32_t currentTime = HAL_GetTick();
 8000772:	f000 ff2d 	bl	80015d0 <HAL_GetTick>
 8000776:	60f8      	str	r0, [r7, #12]

    if (GPIO_Pin == GPIO_PIN_0)
 8000778:	88fb      	ldrh	r3, [r7, #6]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d116      	bne.n	80007ac <HAL_GPIO_EXTI_Callback+0x44>
    {
        if ((currentTime - lastDebounceTime_Pin0) > debounceDelay)
 800077e:	4b34      	ldr	r3, [pc, #208]	@ (8000850 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	2232      	movs	r2, #50	@ 0x32
 8000788:	4293      	cmp	r3, r2
 800078a:	d95c      	bls.n	8000846 <HAL_GPIO_EXTI_Callback+0xde>
        {
            lastDebounceTime_Pin0 = currentTime;
 800078c:	4a30      	ldr	r2, [pc, #192]	@ (8000850 <HAL_GPIO_EXTI_Callback+0xe8>)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	6013      	str	r3, [r2, #0]

            if (limit == 0)
 8000792:	4b30      	ldr	r3, [pc, #192]	@ (8000854 <HAL_GPIO_EXTI_Callback+0xec>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b25b      	sxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d103      	bne.n	80007a4 <HAL_GPIO_EXTI_Callback+0x3c>
                limit = -1;
 800079c:	4b2d      	ldr	r3, [pc, #180]	@ (8000854 <HAL_GPIO_EXTI_Callback+0xec>)
 800079e:	22ff      	movs	r2, #255	@ 0xff
 80007a0:	701a      	strb	r2, [r3, #0]
                    limit2 = 1;
                else
                    limit2 = 0;
            }
        }
}
 80007a2:	e050      	b.n	8000846 <HAL_GPIO_EXTI_Callback+0xde>
                limit = 0;
 80007a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000854 <HAL_GPIO_EXTI_Callback+0xec>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
}
 80007aa:	e04c      	b.n	8000846 <HAL_GPIO_EXTI_Callback+0xde>
    else if (GPIO_Pin == GPIO_PIN_1)
 80007ac:	88fb      	ldrh	r3, [r7, #6]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d116      	bne.n	80007e0 <HAL_GPIO_EXTI_Callback+0x78>
        if ((currentTime - lastDebounceTime_Pin1) > debounceDelay)
 80007b2:	4b29      	ldr	r3, [pc, #164]	@ (8000858 <HAL_GPIO_EXTI_Callback+0xf0>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	2232      	movs	r2, #50	@ 0x32
 80007bc:	4293      	cmp	r3, r2
 80007be:	d942      	bls.n	8000846 <HAL_GPIO_EXTI_Callback+0xde>
            lastDebounceTime_Pin1 = currentTime;
 80007c0:	4a25      	ldr	r2, [pc, #148]	@ (8000858 <HAL_GPIO_EXTI_Callback+0xf0>)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	6013      	str	r3, [r2, #0]
            if (limit == 0)
 80007c6:	4b23      	ldr	r3, [pc, #140]	@ (8000854 <HAL_GPIO_EXTI_Callback+0xec>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d103      	bne.n	80007d8 <HAL_GPIO_EXTI_Callback+0x70>
                limit = 1;
 80007d0:	4b20      	ldr	r3, [pc, #128]	@ (8000854 <HAL_GPIO_EXTI_Callback+0xec>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	701a      	strb	r2, [r3, #0]
}
 80007d6:	e036      	b.n	8000846 <HAL_GPIO_EXTI_Callback+0xde>
                limit = 0;
 80007d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000854 <HAL_GPIO_EXTI_Callback+0xec>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
}
 80007de:	e032      	b.n	8000846 <HAL_GPIO_EXTI_Callback+0xde>
    else if (GPIO_Pin == GPIO_PIN_3)
 80007e0:	88fb      	ldrh	r3, [r7, #6]
 80007e2:	2b08      	cmp	r3, #8
 80007e4:	d116      	bne.n	8000814 <HAL_GPIO_EXTI_Callback+0xac>
            if ((currentTime - lastDebounceTime_Pin1) > debounceDelay)
 80007e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000858 <HAL_GPIO_EXTI_Callback+0xf0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	2232      	movs	r2, #50	@ 0x32
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d928      	bls.n	8000846 <HAL_GPIO_EXTI_Callback+0xde>
                lastDebounceTime_Pin1 = currentTime;
 80007f4:	4a18      	ldr	r2, [pc, #96]	@ (8000858 <HAL_GPIO_EXTI_Callback+0xf0>)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	6013      	str	r3, [r2, #0]
                if (limit2 == 0)
 80007fa:	4b18      	ldr	r3, [pc, #96]	@ (800085c <HAL_GPIO_EXTI_Callback+0xf4>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b25b      	sxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d103      	bne.n	800080c <HAL_GPIO_EXTI_Callback+0xa4>
                    limit2 = -1;
 8000804:	4b15      	ldr	r3, [pc, #84]	@ (800085c <HAL_GPIO_EXTI_Callback+0xf4>)
 8000806:	22ff      	movs	r2, #255	@ 0xff
 8000808:	701a      	strb	r2, [r3, #0]
}
 800080a:	e01c      	b.n	8000846 <HAL_GPIO_EXTI_Callback+0xde>
                    limit2 = 0;
 800080c:	4b13      	ldr	r3, [pc, #76]	@ (800085c <HAL_GPIO_EXTI_Callback+0xf4>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
}
 8000812:	e018      	b.n	8000846 <HAL_GPIO_EXTI_Callback+0xde>
    else if (GPIO_Pin == GPIO_PIN_4)
 8000814:	88fb      	ldrh	r3, [r7, #6]
 8000816:	2b10      	cmp	r3, #16
 8000818:	d115      	bne.n	8000846 <HAL_GPIO_EXTI_Callback+0xde>
            if ((currentTime - lastDebounceTime_Pin1) > debounceDelay)
 800081a:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <HAL_GPIO_EXTI_Callback+0xf0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	68fa      	ldr	r2, [r7, #12]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	2232      	movs	r2, #50	@ 0x32
 8000824:	4293      	cmp	r3, r2
 8000826:	d90e      	bls.n	8000846 <HAL_GPIO_EXTI_Callback+0xde>
                lastDebounceTime_Pin1 = currentTime;
 8000828:	4a0b      	ldr	r2, [pc, #44]	@ (8000858 <HAL_GPIO_EXTI_Callback+0xf0>)
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	6013      	str	r3, [r2, #0]
                if (limit2 == 0)
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <HAL_GPIO_EXTI_Callback+0xf4>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b25b      	sxtb	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d103      	bne.n	8000840 <HAL_GPIO_EXTI_Callback+0xd8>
                    limit2 = 1;
 8000838:	4b08      	ldr	r3, [pc, #32]	@ (800085c <HAL_GPIO_EXTI_Callback+0xf4>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
}
 800083e:	e002      	b.n	8000846 <HAL_GPIO_EXTI_Callback+0xde>
                    limit2 = 0;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <HAL_GPIO_EXTI_Callback+0xf4>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000080 	.word	0x20000080
 8000854:	2000007c 	.word	0x2000007c
 8000858:	20000084 	.word	0x20000084
 800085c:	2000007d 	.word	0x2000007d

08000860 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b4a      	ldr	r3, [pc, #296]	@ (80009a4 <MX_GPIO_Init+0x144>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a49      	ldr	r2, [pc, #292]	@ (80009a4 <MX_GPIO_Init+0x144>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b47      	ldr	r3, [pc, #284]	@ (80009a4 <MX_GPIO_Init+0x144>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b43      	ldr	r3, [pc, #268]	@ (80009a4 <MX_GPIO_Init+0x144>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a42      	ldr	r2, [pc, #264]	@ (80009a4 <MX_GPIO_Init+0x144>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b40      	ldr	r3, [pc, #256]	@ (80009a4 <MX_GPIO_Init+0x144>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b3c      	ldr	r3, [pc, #240]	@ (80009a4 <MX_GPIO_Init+0x144>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a3b      	ldr	r2, [pc, #236]	@ (80009a4 <MX_GPIO_Init+0x144>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b39      	ldr	r3, [pc, #228]	@ (80009a4 <MX_GPIO_Init+0x144>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_Pin|LED1_Pin|LED2_Pin|Motor2_D1_Pin
 80008ca:	2200      	movs	r2, #0
 80008cc:	f24e 2140 	movw	r1, #57920	@ 0xe240
 80008d0:	4835      	ldr	r0, [pc, #212]	@ (80009a8 <MX_GPIO_Init+0x148>)
 80008d2:	f001 fedf 	bl	8002694 <HAL_GPIO_WritePin>
                          |Motor3_D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor3_IN2_Pin|Motor3_IN1_Pin|Motor1_IN1_Pin|Motor1_IN2_Pin
 80008d6:	2200      	movs	r2, #0
 80008d8:	f640 7103 	movw	r1, #3843	@ 0xf03
 80008dc:	4833      	ldr	r0, [pc, #204]	@ (80009ac <MX_GPIO_Init+0x14c>)
 80008de:	f001 fed9 	bl	8002694 <HAL_GPIO_WritePin>
                          |Motor2_IN1_Pin|Motor2_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor1_D1_GPIO_Port, Motor1_D1_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008e8:	4831      	ldr	r0, [pc, #196]	@ (80009b0 <MX_GPIO_Init+0x150>)
 80008ea:	f001 fed3 	bl	8002694 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED1_Pin LED2_Pin Motor2_D1_Pin
                           Motor3_D1_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin|Motor2_D1_Pin
 80008ee:	f24e 2340 	movw	r3, #57920	@ 0xe240
 80008f2:	60fb      	str	r3, [r7, #12]
                          |Motor3_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	4619      	mov	r1, r3
 8000906:	4828      	ldr	r0, [pc, #160]	@ (80009a8 <MX_GPIO_Init+0x148>)
 8000908:	f001 fd18 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : krancowka2_Pin krancowka1_Pin */
  GPIO_InitStruct.Pin = krancowka2_Pin|krancowka1_Pin;
 800090c:	2303      	movs	r3, #3
 800090e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000910:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000916:	2301      	movs	r3, #1
 8000918:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	4619      	mov	r1, r3
 8000920:	4821      	ldr	r0, [pc, #132]	@ (80009a8 <MX_GPIO_Init+0x148>)
 8000922:	f001 fd0b 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : krancowka4_Pin krancowka3_Pin */
  GPIO_InitStruct.Pin = krancowka4_Pin|krancowka3_Pin;
 8000926:	230c      	movs	r3, #12
 8000928:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800092a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800092e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000930:	2301      	movs	r3, #1
 8000932:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	4619      	mov	r1, r3
 800093a:	481b      	ldr	r0, [pc, #108]	@ (80009a8 <MX_GPIO_Init+0x148>)
 800093c:	f001 fcfe 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor3_IN2_Pin Motor3_IN1_Pin Motor1_IN1_Pin Motor1_IN2_Pin
                           Motor2_IN1_Pin Motor2_IN2_Pin */
  GPIO_InitStruct.Pin = Motor3_IN2_Pin|Motor3_IN1_Pin|Motor1_IN1_Pin|Motor1_IN2_Pin
 8000940:	f640 7303 	movw	r3, #3843	@ 0xf03
 8000944:	60fb      	str	r3, [r7, #12]
                          |Motor2_IN1_Pin|Motor2_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	4619      	mov	r1, r3
 8000958:	4814      	ldr	r0, [pc, #80]	@ (80009ac <MX_GPIO_Init+0x14c>)
 800095a:	f001 fcef 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor1_D1_Pin */
  GPIO_InitStruct.Pin = Motor1_D1_Pin;
 800095e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000962:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Motor1_D1_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4619      	mov	r1, r3
 8000976:	480e      	ldr	r0, [pc, #56]	@ (80009b0 <MX_GPIO_Init+0x150>)
 8000978:	f001 fce0 	bl	800233c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2105      	movs	r1, #5
 8000980:	2006      	movs	r0, #6
 8000982:	f001 fca4 	bl	80022ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000986:	2006      	movs	r0, #6
 8000988:	f001 fcbd 	bl	8002306 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2105      	movs	r1, #5
 8000990:	2007      	movs	r0, #7
 8000992:	f001 fc9c 	bl	80022ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000996:	2007      	movs	r0, #7
 8000998:	f001 fcb5 	bl	8002306 <HAL_NVIC_EnableIRQ>

}
 800099c:	bf00      	nop
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020800 	.word	0x40020800
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40020400 	.word	0x40020400

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b8:	f000 fda4 	bl	8001504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009bc:	f000 f84e 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c0:	f7ff ff4e 	bl	8000860 <MX_GPIO_Init>
  MX_CAN1_Init();
 80009c4:	f7ff fd96 	bl	80004f4 <MX_CAN1_Init>
  MX_TIM3_Init();
 80009c8:	f000 f9d4 	bl	8000d74 <MX_TIM3_Init>
  MX_TIM12_Init();
 80009cc:	f000 fa86 	bl	8000edc <MX_TIM12_Init>
  MX_TIM14_Init();
 80009d0:	f000 fae6 	bl	8000fa0 <MX_TIM14_Init>
  MX_TIM7_Init();
 80009d4:	f000 fa4e 	bl	8000e74 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Motor_init();
 80009d8:	f000 fc3e 	bl	8001258 <Motor_init>
  if(HAL_GPIO_ReadPin(krancowka2_GPIO_Port, krancowka2_Pin)==GPIO_PIN_SET)
 80009dc:	2101      	movs	r1, #1
 80009de:	4819      	ldr	r0, [pc, #100]	@ (8000a44 <main+0x90>)
 80009e0:	f001 fe40 	bl	8002664 <HAL_GPIO_ReadPin>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d102      	bne.n	80009f0 <main+0x3c>
  {
	  limit=1;
 80009ea:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <main+0x94>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
  }
  if(HAL_GPIO_ReadPin(krancowka1_GPIO_Port, krancowka1_Pin)==GPIO_PIN_SET)
 80009f0:	2102      	movs	r1, #2
 80009f2:	4814      	ldr	r0, [pc, #80]	@ (8000a44 <main+0x90>)
 80009f4:	f001 fe36 	bl	8002664 <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d102      	bne.n	8000a04 <main+0x50>
  {
	  limit=-1;
 80009fe:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <main+0x94>)
 8000a00:	22ff      	movs	r2, #255	@ 0xff
 8000a02:	701a      	strb	r2, [r3, #0]
  }
  if(HAL_GPIO_ReadPin(krancowka4_GPIO_Port, krancowka4_Pin)==GPIO_PIN_SET)
 8000a04:	2104      	movs	r1, #4
 8000a06:	480f      	ldr	r0, [pc, #60]	@ (8000a44 <main+0x90>)
 8000a08:	f001 fe2c 	bl	8002664 <HAL_GPIO_ReadPin>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d102      	bne.n	8000a18 <main+0x64>
  {
  	  limit2=1;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <main+0x98>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	701a      	strb	r2, [r3, #0]
  }
  if(HAL_GPIO_ReadPin(krancowka3_GPIO_Port, krancowka3_Pin)==GPIO_PIN_SET)
 8000a18:	2108      	movs	r1, #8
 8000a1a:	480a      	ldr	r0, [pc, #40]	@ (8000a44 <main+0x90>)
 8000a1c:	f001 fe22 	bl	8002664 <HAL_GPIO_ReadPin>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d102      	bne.n	8000a2c <main+0x78>
  {
	  limit2= -1;
 8000a26:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <main+0x98>)
 8000a28:	22ff      	movs	r2, #255	@ 0xff
 8000a2a:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim3);
 8000a2c:	4808      	ldr	r0, [pc, #32]	@ (8000a50 <main+0x9c>)
 8000a2e:	f002 fbfb 	bl	8003228 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim12);
 8000a32:	4808      	ldr	r0, [pc, #32]	@ (8000a54 <main+0xa0>)
 8000a34:	f002 fbf8 	bl	8003228 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8000a38:	4807      	ldr	r0, [pc, #28]	@ (8000a58 <main+0xa4>)
 8000a3a:	f002 fbf5 	bl	8003228 <HAL_TIM_Base_Start_IT>
  while (1)
 8000a3e:	bf00      	nop
 8000a40:	e7fd      	b.n	8000a3e <main+0x8a>
 8000a42:	bf00      	nop
 8000a44:	40020800 	.word	0x40020800
 8000a48:	2000007c 	.word	0x2000007c
 8000a4c:	2000007d 	.word	0x2000007d
 8000a50:	20000088 	.word	0x20000088
 8000a54:	20000118 	.word	0x20000118
 8000a58:	20000160 	.word	0x20000160

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b094      	sub	sp, #80	@ 0x50
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	2234      	movs	r2, #52	@ 0x34
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f003 fc14 	bl	8004298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	f107 0308 	add.w	r3, r7, #8
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	4b23      	ldr	r3, [pc, #140]	@ (8000b14 <SystemClock_Config+0xb8>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a88:	4a22      	ldr	r2, [pc, #136]	@ (8000b14 <SystemClock_Config+0xb8>)
 8000a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a90:	4b20      	ldr	r3, [pc, #128]	@ (8000b14 <SystemClock_Config+0xb8>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b18 <SystemClock_Config+0xbc>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b18 <SystemClock_Config+0xbc>)
 8000aaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	4b19      	ldr	r3, [pc, #100]	@ (8000b18 <SystemClock_Config+0xbc>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f002 f8bb 	bl	8002c4c <HAL_RCC_OscConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000adc:	f000 f81e 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 fe16 	bl	800272c <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b06:	f000 f809 	bl	8000b1c <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3750      	adds	r7, #80	@ 0x50
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40007000 	.word	0x40007000

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <Error_Handler+0x8>

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	4a0f      	ldr	r2, [pc, #60]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	4a08      	ldr	r2, [pc, #32]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <NMI_Handler+0x4>

08000b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <MemManage_Handler+0x4>

08000b90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <UsageFault_Handler+0x4>

08000ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
	  //Set_drill(direction[1]);*/



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bce:	f000 fceb 	bl	80015a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(krancowka2_Pin);
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f001 fd8e 	bl	80026fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(krancowka1_Pin);
 8000be8:	2002      	movs	r0, #2
 8000bea:	f001 fd87 	bl	80026fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bf8:	4802      	ldr	r0, [pc, #8]	@ (8000c04 <CAN1_TX_IRQHandler+0x10>)
 8000bfa:	f001 f85d 	bl	8001cb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000054 	.word	0x20000054

08000c08 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c0c:	4802      	ldr	r0, [pc, #8]	@ (8000c18 <CAN1_RX0_IRQHandler+0x10>)
 8000c0e:	f001 f853 	bl	8001cb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000054 	.word	0x20000054

08000c1c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c20:	4802      	ldr	r0, [pc, #8]	@ (8000c2c <CAN1_RX1_IRQHandler+0x10>)
 8000c22:	f001 f849 	bl	8001cb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000054 	.word	0x20000054

08000c30 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c34:	4802      	ldr	r0, [pc, #8]	@ (8000c40 <CAN1_SCE_IRQHandler+0x10>)
 8000c36:	f001 f83f 	bl	8001cb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000054 	.word	0x20000054

08000c44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <TIM3_IRQHandler+0x10>)
 8000c4a:	f002 fccd 	bl	80035e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000088 	.word	0x20000088

08000c58 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8000c5e:	f002 fcc3 	bl	80035e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000118 	.word	0x20000118

08000c6c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000c70:	4802      	ldr	r0, [pc, #8]	@ (8000c7c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000c72:	f002 fcb9 	bl	80035e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000160 	.word	0x20000160

08000c80 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(direction[0]==2 && limit==1)
 8000c84:	4b2d      	ldr	r3, [pc, #180]	@ (8000d3c <TIM7_IRQHandler+0xbc>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b25b      	sxtb	r3, r3
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d107      	bne.n	8000c9e <TIM7_IRQHandler+0x1e>
 8000c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d40 <TIM7_IRQHandler+0xc0>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b25b      	sxtb	r3, r3
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d102      	bne.n	8000c9e <TIM7_IRQHandler+0x1e>
		  {
			  speed[0]=0;
 8000c98:	4b2a      	ldr	r3, [pc, #168]	@ (8000d44 <TIM7_IRQHandler+0xc4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
		  }
		  if(direction[0]==1 && limit==-1)
 8000c9e:	4b27      	ldr	r3, [pc, #156]	@ (8000d3c <TIM7_IRQHandler+0xbc>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d108      	bne.n	8000cba <TIM7_IRQHandler+0x3a>
 8000ca8:	4b25      	ldr	r3, [pc, #148]	@ (8000d40 <TIM7_IRQHandler+0xc0>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b25b      	sxtb	r3, r3
 8000cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb2:	d102      	bne.n	8000cba <TIM7_IRQHandler+0x3a>
		  {
			  speed[0]=0;
 8000cb4:	4b23      	ldr	r3, [pc, #140]	@ (8000d44 <TIM7_IRQHandler+0xc4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
		  }
		  if(direction[1]==2 && limit2==1)
 8000cba:	4b20      	ldr	r3, [pc, #128]	@ (8000d3c <TIM7_IRQHandler+0xbc>)
 8000cbc:	785b      	ldrb	r3, [r3, #1]
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d107      	bne.n	8000cd4 <TIM7_IRQHandler+0x54>
 8000cc4:	4b20      	ldr	r3, [pc, #128]	@ (8000d48 <TIM7_IRQHandler+0xc8>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d102      	bne.n	8000cd4 <TIM7_IRQHandler+0x54>
		  {
			  speed[1]=0;
 8000cce:	4b1d      	ldr	r3, [pc, #116]	@ (8000d44 <TIM7_IRQHandler+0xc4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	705a      	strb	r2, [r3, #1]
		  }
		  if(direction[1]==1 && limit2==-1)
 8000cd4:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <TIM7_IRQHandler+0xbc>)
 8000cd6:	785b      	ldrb	r3, [r3, #1]
 8000cd8:	b25b      	sxtb	r3, r3
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d108      	bne.n	8000cf0 <TIM7_IRQHandler+0x70>
 8000cde:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <TIM7_IRQHandler+0xc8>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce8:	d102      	bne.n	8000cf0 <TIM7_IRQHandler+0x70>
		  {
			  speed[1]=0;
 8000cea:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <TIM7_IRQHandler+0xc4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	705a      	strb	r2, [r3, #1]
		  }
		  Set_Motor1(direction[0],speed[0]);
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <TIM7_IRQHandler+0xbc>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <TIM7_IRQHandler+0xc4>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4610      	mov	r0, r2
 8000d02:	f000 fb09 	bl	8001318 <Set_Motor1>
		  Set_Motor2(direction[1],speed[1]);
 8000d06:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <TIM7_IRQHandler+0xbc>)
 8000d08:	785b      	ldrb	r3, [r3, #1]
 8000d0a:	b25b      	sxtb	r3, r3
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <TIM7_IRQHandler+0xc4>)
 8000d10:	785b      	ldrb	r3, [r3, #1]
 8000d12:	b25b      	sxtb	r3, r3
 8000d14:	4619      	mov	r1, r3
 8000d16:	4610      	mov	r0, r2
 8000d18:	f000 fb44 	bl	80013a4 <Set_Motor2>
		  Set_Motor3(direction[2],speed[2]);
 8000d1c:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <TIM7_IRQHandler+0xbc>)
 8000d1e:	789b      	ldrb	r3, [r3, #2]
 8000d20:	b25b      	sxtb	r3, r3
 8000d22:	461a      	mov	r2, r3
 8000d24:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <TIM7_IRQHandler+0xc4>)
 8000d26:	789b      	ldrb	r3, [r3, #2]
 8000d28:	b25b      	sxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	f000 fb7f 	bl	8001430 <Set_Motor3>
		  //Set_drill(direction[1]);
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d32:	4806      	ldr	r0, [pc, #24]	@ (8000d4c <TIM7_IRQHandler+0xcc>)
 8000d34:	f002 fc58 	bl	80035e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000050 	.word	0x20000050
 8000d40:	2000007c 	.word	0x2000007c
 8000d44:	2000004c 	.word	0x2000004c
 8000d48:	2000007d 	.word	0x2000007d
 8000d4c:	200000d0 	.word	0x200000d0

08000d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <SystemInit+0x20>)
 8000d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d5a:	4a05      	ldr	r2, [pc, #20]	@ (8000d70 <SystemInit+0x20>)
 8000d5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <MX_TIM3_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08e      	sub	sp, #56	@ 0x38
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d88:	f107 0320 	add.w	r3, r7, #32
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
 8000da0:	615a      	str	r2, [r3, #20]
 8000da2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000da4:	4b31      	ldr	r3, [pc, #196]	@ (8000e6c <MX_TIM3_Init+0xf8>)
 8000da6:	4a32      	ldr	r2, [pc, #200]	@ (8000e70 <MX_TIM3_Init+0xfc>)
 8000da8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000daa:	4b30      	ldr	r3, [pc, #192]	@ (8000e6c <MX_TIM3_Init+0xf8>)
 8000dac:	220f      	movs	r2, #15
 8000dae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db0:	4b2e      	ldr	r3, [pc, #184]	@ (8000e6c <MX_TIM3_Init+0xf8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000db6:	4b2d      	ldr	r3, [pc, #180]	@ (8000e6c <MX_TIM3_Init+0xf8>)
 8000db8:	2263      	movs	r2, #99	@ 0x63
 8000dba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8000e6c <MX_TIM3_Init+0xf8>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e6c <MX_TIM3_Init+0xf8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dc8:	4828      	ldr	r0, [pc, #160]	@ (8000e6c <MX_TIM3_Init+0xf8>)
 8000dca:	f002 f9dd 	bl	8003188 <HAL_TIM_Base_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000dd4:	f7ff fea2 	bl	8000b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000de2:	4619      	mov	r1, r3
 8000de4:	4821      	ldr	r0, [pc, #132]	@ (8000e6c <MX_TIM3_Init+0xf8>)
 8000de6:	f002 fdb1 	bl	800394c <HAL_TIM_ConfigClockSource>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000df0:	f7ff fe94 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000df4:	481d      	ldr	r0, [pc, #116]	@ (8000e6c <MX_TIM3_Init+0xf8>)
 8000df6:	f002 fa87 	bl	8003308 <HAL_TIM_PWM_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000e00:	f7ff fe8c 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e0c:	f107 0320 	add.w	r3, r7, #32
 8000e10:	4619      	mov	r1, r3
 8000e12:	4816      	ldr	r0, [pc, #88]	@ (8000e6c <MX_TIM3_Init+0xf8>)
 8000e14:	f003 f9b0 	bl	8004178 <HAL_TIMEx_MasterConfigSynchronization>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000e1e:	f7ff fe7d 	bl	8000b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e22:	2360      	movs	r3, #96	@ 0x60
 8000e24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2204      	movs	r2, #4
 8000e36:	4619      	mov	r1, r3
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <MX_TIM3_Init+0xf8>)
 8000e3a:	f002 fcc5 	bl	80037c8 <HAL_TIM_PWM_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000e44:	f7ff fe6a 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2208      	movs	r2, #8
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4807      	ldr	r0, [pc, #28]	@ (8000e6c <MX_TIM3_Init+0xf8>)
 8000e50:	f002 fcba 	bl	80037c8 <HAL_TIM_PWM_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8000e5a:	f7ff fe5f 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e5e:	4803      	ldr	r0, [pc, #12]	@ (8000e6c <MX_TIM3_Init+0xf8>)
 8000e60:	f000 f96e 	bl	8001140 <HAL_TIM_MspPostInit>

}
 8000e64:	bf00      	nop
 8000e66:	3738      	adds	r7, #56	@ 0x38
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20000088 	.word	0x20000088
 8000e70:	40000400 	.word	0x40000400

08000e74 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e82:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <MX_TIM7_Init+0x60>)
 8000e84:	4a14      	ldr	r2, [pc, #80]	@ (8000ed8 <MX_TIM7_Init+0x64>)
 8000e86:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000e88:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <MX_TIM7_Init+0x60>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <MX_TIM7_Init+0x60>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 15;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <MX_TIM7_Init+0x60>)
 8000e96:	220f      	movs	r2, #15
 8000e98:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <MX_TIM7_Init+0x60>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000ea0:	480c      	ldr	r0, [pc, #48]	@ (8000ed4 <MX_TIM7_Init+0x60>)
 8000ea2:	f002 f971 	bl	8003188 <HAL_TIM_Base_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8000eac:	f7ff fe36 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <MX_TIM7_Init+0x60>)
 8000ebe:	f003 f95b 	bl	8004178 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8000ec8:	f7ff fe28 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200000d0 	.word	0x200000d0
 8000ed8:	40001400 	.word	0x40001400

08000edc <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	@ 0x30
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]
 8000efe:	615a      	str	r2, [r3, #20]
 8000f00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000f02:	4b25      	ldr	r3, [pc, #148]	@ (8000f98 <MX_TIM12_Init+0xbc>)
 8000f04:	4a25      	ldr	r2, [pc, #148]	@ (8000f9c <MX_TIM12_Init+0xc0>)
 8000f06:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 15;
 8000f08:	4b23      	ldr	r3, [pc, #140]	@ (8000f98 <MX_TIM12_Init+0xbc>)
 8000f0a:	220f      	movs	r2, #15
 8000f0c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0e:	4b22      	ldr	r3, [pc, #136]	@ (8000f98 <MX_TIM12_Init+0xbc>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 99;
 8000f14:	4b20      	ldr	r3, [pc, #128]	@ (8000f98 <MX_TIM12_Init+0xbc>)
 8000f16:	2263      	movs	r2, #99	@ 0x63
 8000f18:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000f98 <MX_TIM12_Init+0xbc>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f20:	4b1d      	ldr	r3, [pc, #116]	@ (8000f98 <MX_TIM12_Init+0xbc>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000f26:	481c      	ldr	r0, [pc, #112]	@ (8000f98 <MX_TIM12_Init+0xbc>)
 8000f28:	f002 f92e 	bl	8003188 <HAL_TIM_Base_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8000f32:	f7ff fdf3 	bl	8000b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f3a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000f3c:	f107 0320 	add.w	r3, r7, #32
 8000f40:	4619      	mov	r1, r3
 8000f42:	4815      	ldr	r0, [pc, #84]	@ (8000f98 <MX_TIM12_Init+0xbc>)
 8000f44:	f002 fd02 	bl	800394c <HAL_TIM_ConfigClockSource>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8000f4e:	f7ff fde5 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000f52:	4811      	ldr	r0, [pc, #68]	@ (8000f98 <MX_TIM12_Init+0xbc>)
 8000f54:	f002 f9d8 	bl	8003308 <HAL_TIM_PWM_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 8000f5e:	f7ff fddd 	bl	8000b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f62:	2360      	movs	r3, #96	@ 0x60
 8000f64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2204      	movs	r2, #4
 8000f76:	4619      	mov	r1, r3
 8000f78:	4807      	ldr	r0, [pc, #28]	@ (8000f98 <MX_TIM12_Init+0xbc>)
 8000f7a:	f002 fc25 	bl	80037c8 <HAL_TIM_PWM_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 8000f84:	f7ff fdca 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000f88:	4803      	ldr	r0, [pc, #12]	@ (8000f98 <MX_TIM12_Init+0xbc>)
 8000f8a:	f000 f8d9 	bl	8001140 <HAL_TIM_MspPostInit>

}
 8000f8e:	bf00      	nop
 8000f90:	3730      	adds	r7, #48	@ 0x30
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000118 	.word	0x20000118
 8000f9c:	40001800 	.word	0x40001800

08000fa0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
 8000fb4:	615a      	str	r2, [r3, #20]
 8000fb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <MX_TIM14_Init+0x94>)
 8000fba:	4a1f      	ldr	r2, [pc, #124]	@ (8001038 <MX_TIM14_Init+0x98>)
 8000fbc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 319;
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <MX_TIM14_Init+0x94>)
 8000fc0:	f240 123f 	movw	r2, #319	@ 0x13f
 8000fc4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <MX_TIM14_Init+0x94>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 8000fcc:	4b19      	ldr	r3, [pc, #100]	@ (8001034 <MX_TIM14_Init+0x94>)
 8000fce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fd2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <MX_TIM14_Init+0x94>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fda:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <MX_TIM14_Init+0x94>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000fe0:	4814      	ldr	r0, [pc, #80]	@ (8001034 <MX_TIM14_Init+0x94>)
 8000fe2:	f002 f8d1 	bl	8003188 <HAL_TIM_Base_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8000fec:	f7ff fd96 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000ff0:	4810      	ldr	r0, [pc, #64]	@ (8001034 <MX_TIM14_Init+0x94>)
 8000ff2:	f002 f989 	bl	8003308 <HAL_TIM_PWM_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8000ffc:	f7ff fd8e 	bl	8000b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001000:	2360      	movs	r3, #96	@ 0x60
 8001002:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	4619      	mov	r1, r3
 8001016:	4807      	ldr	r0, [pc, #28]	@ (8001034 <MX_TIM14_Init+0x94>)
 8001018:	f002 fbd6 	bl	80037c8 <HAL_TIM_PWM_ConfigChannel>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8001022:	f7ff fd7b 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001026:	4803      	ldr	r0, [pc, #12]	@ (8001034 <MX_TIM14_Init+0x94>)
 8001028:	f000 f88a 	bl	8001140 <HAL_TIM_MspPostInit>

}
 800102c:	bf00      	nop
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000160 	.word	0x20000160
 8001038:	40002000 	.word	0x40002000

0800103c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a38      	ldr	r2, [pc, #224]	@ (800112c <HAL_TIM_Base_MspInit+0xf0>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d116      	bne.n	800107c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	4b37      	ldr	r3, [pc, #220]	@ (8001130 <HAL_TIM_Base_MspInit+0xf4>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	4a36      	ldr	r2, [pc, #216]	@ (8001130 <HAL_TIM_Base_MspInit+0xf4>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	6413      	str	r3, [r2, #64]	@ 0x40
 800105e:	4b34      	ldr	r3, [pc, #208]	@ (8001130 <HAL_TIM_Base_MspInit+0xf4>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	201d      	movs	r0, #29
 8001070:	f001 f92d 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001074:	201d      	movs	r0, #29
 8001076:	f001 f946 	bl	8002306 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800107a:	e052      	b.n	8001122 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM7)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a2c      	ldr	r2, [pc, #176]	@ (8001134 <HAL_TIM_Base_MspInit+0xf8>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d116      	bne.n	80010b4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <HAL_TIM_Base_MspInit+0xf4>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	4a28      	ldr	r2, [pc, #160]	@ (8001130 <HAL_TIM_Base_MspInit+0xf4>)
 8001090:	f043 0320 	orr.w	r3, r3, #32
 8001094:	6413      	str	r3, [r2, #64]	@ 0x40
 8001096:	4b26      	ldr	r3, [pc, #152]	@ (8001130 <HAL_TIM_Base_MspInit+0xf4>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	f003 0320 	and.w	r3, r3, #32
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 6, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2106      	movs	r1, #6
 80010a6:	2037      	movs	r0, #55	@ 0x37
 80010a8:	f001 f911 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80010ac:	2037      	movs	r0, #55	@ 0x37
 80010ae:	f001 f92a 	bl	8002306 <HAL_NVIC_EnableIRQ>
}
 80010b2:	e036      	b.n	8001122 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM12)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001138 <HAL_TIM_Base_MspInit+0xfc>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d116      	bne.n	80010ec <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <HAL_TIM_Base_MspInit+0xf4>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001130 <HAL_TIM_Base_MspInit+0xf4>)
 80010c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ce:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <HAL_TIM_Base_MspInit+0xf4>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	202b      	movs	r0, #43	@ 0x2b
 80010e0:	f001 f8f5 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80010e4:	202b      	movs	r0, #43	@ 0x2b
 80010e6:	f001 f90e 	bl	8002306 <HAL_NVIC_EnableIRQ>
}
 80010ea:	e01a      	b.n	8001122 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM14)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a12      	ldr	r2, [pc, #72]	@ (800113c <HAL_TIM_Base_MspInit+0x100>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d115      	bne.n	8001122 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <HAL_TIM_Base_MspInit+0xf4>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001130 <HAL_TIM_Base_MspInit+0xf4>)
 8001100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001104:	6413      	str	r3, [r2, #64]	@ 0x40
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <HAL_TIM_Base_MspInit+0xf4>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	202d      	movs	r0, #45	@ 0x2d
 8001118:	f001 f8d9 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800111c:	202d      	movs	r0, #45	@ 0x2d
 800111e:	f001 f8f2 	bl	8002306 <HAL_NVIC_EnableIRQ>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40000400 	.word	0x40000400
 8001130:	40023800 	.word	0x40023800
 8001134:	40001400 	.word	0x40001400
 8001138:	40001800 	.word	0x40001800
 800113c:	40002000 	.word	0x40002000

08001140 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	@ 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a37      	ldr	r2, [pc, #220]	@ (800123c <HAL_TIM_MspPostInit+0xfc>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d11f      	bne.n	80011a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b36      	ldr	r3, [pc, #216]	@ (8001240 <HAL_TIM_MspPostInit+0x100>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a35      	ldr	r2, [pc, #212]	@ (8001240 <HAL_TIM_MspPostInit+0x100>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b33      	ldr	r3, [pc, #204]	@ (8001240 <HAL_TIM_MspPostInit+0x100>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = Motor2_PWM_Pin|Motor3_PWM_Pin;
 800117e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001190:	2302      	movs	r3, #2
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	482a      	ldr	r0, [pc, #168]	@ (8001244 <HAL_TIM_MspPostInit+0x104>)
 800119c:	f001 f8ce 	bl	800233c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80011a0:	e047      	b.n	8001232 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM12)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a28      	ldr	r2, [pc, #160]	@ (8001248 <HAL_TIM_MspPostInit+0x108>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d11f      	bne.n	80011ec <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <HAL_TIM_MspPostInit+0x100>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b4:	4a22      	ldr	r2, [pc, #136]	@ (8001240 <HAL_TIM_MspPostInit+0x100>)
 80011b6:	f043 0302 	orr.w	r3, r3, #2
 80011ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80011bc:	4b20      	ldr	r3, [pc, #128]	@ (8001240 <HAL_TIM_MspPostInit+0x100>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor1_PWM_Pin;
 80011c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80011da:	2309      	movs	r3, #9
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Motor1_PWM_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	4819      	ldr	r0, [pc, #100]	@ (800124c <HAL_TIM_MspPostInit+0x10c>)
 80011e6:	f001 f8a9 	bl	800233c <HAL_GPIO_Init>
}
 80011ea:	e022      	b.n	8001232 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM14)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a17      	ldr	r2, [pc, #92]	@ (8001250 <HAL_TIM_MspPostInit+0x110>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d11d      	bne.n	8001232 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <HAL_TIM_MspPostInit+0x100>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	4a10      	ldr	r2, [pc, #64]	@ (8001240 <HAL_TIM_MspPostInit+0x100>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6313      	str	r3, [r2, #48]	@ 0x30
 8001206:	4b0e      	ldr	r3, [pc, #56]	@ (8001240 <HAL_TIM_MspPostInit+0x100>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_wiertlo_Pin;
 8001212:	2380      	movs	r3, #128	@ 0x80
 8001214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001222:	2309      	movs	r3, #9
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_wiertlo_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4809      	ldr	r0, [pc, #36]	@ (8001254 <HAL_TIM_MspPostInit+0x114>)
 800122e:	f001 f885 	bl	800233c <HAL_GPIO_Init>
}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	@ 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40000400 	.word	0x40000400
 8001240:	40023800 	.word	0x40023800
 8001244:	40020800 	.word	0x40020800
 8001248:	40001800 	.word	0x40001800
 800124c:	40020400 	.word	0x40020400
 8001250:	40002000 	.word	0x40002000
 8001254:	40020000 	.word	0x40020000

08001258 <Motor_init>:
  }
}

/* USER CODE BEGIN 1 */
void Motor_init()
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	 HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 800125c:	2104      	movs	r1, #4
 800125e:	4828      	ldr	r0, [pc, #160]	@ (8001300 <Motor_init+0xa8>)
 8001260:	f002 f8ac 	bl	80033bc <HAL_TIM_PWM_Start_IT>
	 HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8001264:	2108      	movs	r1, #8
 8001266:	4826      	ldr	r0, [pc, #152]	@ (8001300 <Motor_init+0xa8>)
 8001268:	f002 f8a8 	bl	80033bc <HAL_TIM_PWM_Start_IT>
	 HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_2);
 800126c:	2104      	movs	r1, #4
 800126e:	4825      	ldr	r0, [pc, #148]	@ (8001304 <Motor_init+0xac>)
 8001270:	f002 f8a4 	bl	80033bc <HAL_TIM_PWM_Start_IT>
	 HAL_TIM_PWM_Start_IT(&htim14, TIM_CHANNEL_1);
 8001274:	2100      	movs	r1, #0
 8001276:	4824      	ldr	r0, [pc, #144]	@ (8001308 <Motor_init+0xb0>)
 8001278:	f002 f8a0 	bl	80033bc <HAL_TIM_PWM_Start_IT>
	 //inicjalizacja silnika do opuszczania
	 HAL_GPIO_WritePin(Motor1_D1_GPIO_Port, Motor1_D1_Pin,0);
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001282:	4822      	ldr	r0, [pc, #136]	@ (800130c <Motor_init+0xb4>)
 8001284:	f001 fa06 	bl	8002694 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Motor1_IN1_GPIO_Port, Motor1_IN1_Pin,0);
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800128e:	4820      	ldr	r0, [pc, #128]	@ (8001310 <Motor_init+0xb8>)
 8001290:	f001 fa00 	bl	8002694 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Motor1_IN2_GPIO_Port, Motor1_IN2_Pin,0);
 8001294:	2200      	movs	r2, #0
 8001296:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800129a:	481d      	ldr	r0, [pc, #116]	@ (8001310 <Motor_init+0xb8>)
 800129c:	f001 f9fa 	bl	8002694 <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,0);
 80012a0:	4b18      	ldr	r3, [pc, #96]	@ (8001304 <Motor_init+0xac>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2200      	movs	r2, #0
 80012a6:	639a      	str	r2, [r3, #56]	@ 0x38
	 //inicjalizacja silnika do wiertła
	 HAL_GPIO_WritePin(Motor2_D1_GPIO_Port, Motor2_D1_Pin,0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2140      	movs	r1, #64	@ 0x40
 80012ac:	4819      	ldr	r0, [pc, #100]	@ (8001314 <Motor_init+0xbc>)
 80012ae:	f001 f9f1 	bl	8002694 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Motor2_IN1_GPIO_Port, Motor2_IN1_Pin,0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012b8:	4815      	ldr	r0, [pc, #84]	@ (8001310 <Motor_init+0xb8>)
 80012ba:	f001 f9eb 	bl	8002694 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Motor2_IN2_GPIO_Port, Motor2_IN2_Pin,0);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012c4:	4812      	ldr	r0, [pc, #72]	@ (8001310 <Motor_init+0xb8>)
 80012c6:	f001 f9e5 	bl	8002694 <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 80012ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <Motor_init+0xa8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2200      	movs	r2, #0
 80012d0:	639a      	str	r2, [r3, #56]	@ 0x38
	 //inicjalizacja 3 silnika
	 HAL_GPIO_WritePin(Motor3_D1_GPIO_Port, Motor3_D1_Pin,0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012d8:	480e      	ldr	r0, [pc, #56]	@ (8001314 <Motor_init+0xbc>)
 80012da:	f001 f9db 	bl	8002694 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Motor3_IN1_GPIO_Port, Motor3_IN1_Pin,0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2102      	movs	r1, #2
 80012e2:	480b      	ldr	r0, [pc, #44]	@ (8001310 <Motor_init+0xb8>)
 80012e4:	f001 f9d6 	bl	8002694 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(Motor3_IN2_GPIO_Port, Motor3_IN2_Pin,0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2101      	movs	r1, #1
 80012ec:	4808      	ldr	r0, [pc, #32]	@ (8001310 <Motor_init+0xb8>)
 80012ee:	f001 f9d1 	bl	8002694 <HAL_GPIO_WritePin>
	 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 80012f2:	4b03      	ldr	r3, [pc, #12]	@ (8001300 <Motor_init+0xa8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2200      	movs	r2, #0
 80012f8:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000088 	.word	0x20000088
 8001304:	20000118 	.word	0x20000118
 8001308:	20000160 	.word	0x20000160
 800130c:	40020400 	.word	0x40020400
 8001310:	40020000 	.word	0x40020000
 8001314:	40020800 	.word	0x40020800

08001318 <Set_Motor1>:
void Set_Motor1(int direction , int speed)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
	if(direction==1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d110      	bne.n	800134a <Set_Motor1+0x32>
	{
		 HAL_GPIO_WritePin(Motor1_IN1_GPIO_Port, Motor1_IN1_Pin,1);
 8001328:	2201      	movs	r2, #1
 800132a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800132e:	481b      	ldr	r0, [pc, #108]	@ (800139c <Set_Motor1+0x84>)
 8001330:	f001 f9b0 	bl	8002694 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Motor1_IN2_GPIO_Port, Motor1_IN2_Pin,0);
 8001334:	2200      	movs	r2, #0
 8001336:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800133a:	4818      	ldr	r0, [pc, #96]	@ (800139c <Set_Motor1+0x84>)
 800133c:	f001 f9aa 	bl	8002694 <HAL_GPIO_WritePin>
		 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,speed);
 8001340:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <Set_Motor1+0x88>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	639a      	str	r2, [r3, #56]	@ 0x38
		 HAL_GPIO_WritePin(Motor1_IN1_GPIO_Port, Motor1_IN1_Pin,0);
		 HAL_GPIO_WritePin(Motor1_IN2_GPIO_Port, Motor1_IN2_Pin,0);
		 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,0);
	}

}
 8001348:	e023      	b.n	8001392 <Set_Motor1+0x7a>
	else if(direction==2)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d110      	bne.n	8001372 <Set_Motor1+0x5a>
		 HAL_GPIO_WritePin(Motor1_IN1_GPIO_Port, Motor1_IN1_Pin,0);
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001356:	4811      	ldr	r0, [pc, #68]	@ (800139c <Set_Motor1+0x84>)
 8001358:	f001 f99c 	bl	8002694 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Motor1_IN2_GPIO_Port, Motor1_IN2_Pin,1);
 800135c:	2201      	movs	r2, #1
 800135e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001362:	480e      	ldr	r0, [pc, #56]	@ (800139c <Set_Motor1+0x84>)
 8001364:	f001 f996 	bl	8002694 <HAL_GPIO_WritePin>
		 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,speed);
 8001368:	4b0d      	ldr	r3, [pc, #52]	@ (80013a0 <Set_Motor1+0x88>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001370:	e00f      	b.n	8001392 <Set_Motor1+0x7a>
		 HAL_GPIO_WritePin(Motor1_IN1_GPIO_Port, Motor1_IN1_Pin,0);
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001378:	4808      	ldr	r0, [pc, #32]	@ (800139c <Set_Motor1+0x84>)
 800137a:	f001 f98b 	bl	8002694 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Motor1_IN2_GPIO_Port, Motor1_IN2_Pin,0);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001384:	4805      	ldr	r0, [pc, #20]	@ (800139c <Set_Motor1+0x84>)
 8001386:	f001 f985 	bl	8002694 <HAL_GPIO_WritePin>
		 __HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,0);
 800138a:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <Set_Motor1+0x88>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2200      	movs	r2, #0
 8001390:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40020000 	.word	0x40020000
 80013a0:	20000118 	.word	0x20000118

080013a4 <Set_Motor2>:
void Set_Motor2(int direction , int speed)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
	if(direction==1)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d110      	bne.n	80013d6 <Set_Motor2+0x32>
	{
		 HAL_GPIO_WritePin(Motor2_IN1_GPIO_Port, Motor2_IN1_Pin,1);
 80013b4:	2201      	movs	r2, #1
 80013b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013ba:	481b      	ldr	r0, [pc, #108]	@ (8001428 <Set_Motor2+0x84>)
 80013bc:	f001 f96a 	bl	8002694 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Motor2_IN2_GPIO_Port, Motor2_IN2_Pin,0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013c6:	4818      	ldr	r0, [pc, #96]	@ (8001428 <Set_Motor2+0x84>)
 80013c8:	f001 f964 	bl	8002694 <HAL_GPIO_WritePin>
		 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,speed);
 80013cc:	4b17      	ldr	r3, [pc, #92]	@ (800142c <Set_Motor2+0x88>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	639a      	str	r2, [r3, #56]	@ 0x38
		 HAL_GPIO_WritePin(Motor2_IN1_GPIO_Port, Motor2_IN1_Pin,0);
		 HAL_GPIO_WritePin(Motor2_IN2_GPIO_Port, Motor2_IN2_Pin,0);
		 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
	}

}
 80013d4:	e023      	b.n	800141e <Set_Motor2+0x7a>
	else if(direction==2)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d110      	bne.n	80013fe <Set_Motor2+0x5a>
		 HAL_GPIO_WritePin(Motor2_IN1_GPIO_Port, Motor2_IN1_Pin,0);
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013e2:	4811      	ldr	r0, [pc, #68]	@ (8001428 <Set_Motor2+0x84>)
 80013e4:	f001 f956 	bl	8002694 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Motor2_IN2_GPIO_Port, Motor2_IN2_Pin,1);
 80013e8:	2201      	movs	r2, #1
 80013ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013ee:	480e      	ldr	r0, [pc, #56]	@ (8001428 <Set_Motor2+0x84>)
 80013f0:	f001 f950 	bl	8002694 <HAL_GPIO_WritePin>
		 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,speed);
 80013f4:	4b0d      	ldr	r3, [pc, #52]	@ (800142c <Set_Motor2+0x88>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80013fc:	e00f      	b.n	800141e <Set_Motor2+0x7a>
		 HAL_GPIO_WritePin(Motor2_IN1_GPIO_Port, Motor2_IN1_Pin,0);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001404:	4808      	ldr	r0, [pc, #32]	@ (8001428 <Set_Motor2+0x84>)
 8001406:	f001 f945 	bl	8002694 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Motor2_IN2_GPIO_Port, Motor2_IN2_Pin,0);
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001410:	4805      	ldr	r0, [pc, #20]	@ (8001428 <Set_Motor2+0x84>)
 8001412:	f001 f93f 	bl	8002694 <HAL_GPIO_WritePin>
		 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,0);
 8001416:	4b05      	ldr	r3, [pc, #20]	@ (800142c <Set_Motor2+0x88>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2200      	movs	r2, #0
 800141c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40020000 	.word	0x40020000
 800142c:	20000088 	.word	0x20000088

08001430 <Set_Motor3>:
void Set_Motor3(int direction , int speed)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
	if(direction==1)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d10e      	bne.n	800145e <Set_Motor3+0x2e>
	{
		 HAL_GPIO_WritePin(Motor3_IN1_GPIO_Port, Motor3_IN1_Pin,1);
 8001440:	2201      	movs	r2, #1
 8001442:	2102      	movs	r1, #2
 8001444:	4818      	ldr	r0, [pc, #96]	@ (80014a8 <Set_Motor3+0x78>)
 8001446:	f001 f925 	bl	8002694 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Motor3_IN2_GPIO_Port, Motor3_IN2_Pin,0);
 800144a:	2200      	movs	r2, #0
 800144c:	2101      	movs	r1, #1
 800144e:	4816      	ldr	r0, [pc, #88]	@ (80014a8 <Set_Motor3+0x78>)
 8001450:	f001 f920 	bl	8002694 <HAL_GPIO_WritePin>
		 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,speed);
 8001454:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <Set_Motor3+0x7c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	63da      	str	r2, [r3, #60]	@ 0x3c
		 HAL_GPIO_WritePin(Motor3_IN1_GPIO_Port, Motor3_IN1_Pin,0);
		 HAL_GPIO_WritePin(Motor3_IN2_GPIO_Port, Motor3_IN2_Pin,0);
		 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
	}

}
 800145c:	e01f      	b.n	800149e <Set_Motor3+0x6e>
	else if(direction==2)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d10e      	bne.n	8001482 <Set_Motor3+0x52>
		 HAL_GPIO_WritePin(Motor3_IN1_GPIO_Port, Motor3_IN1_Pin,0);
 8001464:	2200      	movs	r2, #0
 8001466:	2102      	movs	r1, #2
 8001468:	480f      	ldr	r0, [pc, #60]	@ (80014a8 <Set_Motor3+0x78>)
 800146a:	f001 f913 	bl	8002694 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Motor3_IN2_GPIO_Port, Motor3_IN2_Pin,1);
 800146e:	2201      	movs	r2, #1
 8001470:	2101      	movs	r1, #1
 8001472:	480d      	ldr	r0, [pc, #52]	@ (80014a8 <Set_Motor3+0x78>)
 8001474:	f001 f90e 	bl	8002694 <HAL_GPIO_WritePin>
		 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,speed);
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <Set_Motor3+0x7c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001480:	e00d      	b.n	800149e <Set_Motor3+0x6e>
		 HAL_GPIO_WritePin(Motor3_IN1_GPIO_Port, Motor3_IN1_Pin,0);
 8001482:	2200      	movs	r2, #0
 8001484:	2102      	movs	r1, #2
 8001486:	4808      	ldr	r0, [pc, #32]	@ (80014a8 <Set_Motor3+0x78>)
 8001488:	f001 f904 	bl	8002694 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(Motor3_IN2_GPIO_Port, Motor3_IN2_Pin,0);
 800148c:	2200      	movs	r2, #0
 800148e:	2101      	movs	r1, #1
 8001490:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <Set_Motor3+0x78>)
 8001492:	f001 f8ff 	bl	8002694 <HAL_GPIO_WritePin>
		 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8001496:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <Set_Motor3+0x7c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2200      	movs	r2, #0
 800149c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40020000 	.word	0x40020000
 80014ac:	20000088 	.word	0x20000088

080014b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014b4:	f7ff fc4c 	bl	8000d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014b8:	480c      	ldr	r0, [pc, #48]	@ (80014ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ba:	490d      	ldr	r1, [pc, #52]	@ (80014f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014bc:	4a0d      	ldr	r2, [pc, #52]	@ (80014f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c0:	e002      	b.n	80014c8 <LoopCopyDataInit>

080014c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c6:	3304      	adds	r3, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014cc:	d3f9      	bcc.n	80014c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ce:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014d0:	4c0a      	ldr	r4, [pc, #40]	@ (80014fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d4:	e001      	b.n	80014da <LoopFillZerobss>

080014d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d8:	3204      	adds	r2, #4

080014da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014dc:	d3fb      	bcc.n	80014d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014de:	f002 fee3 	bl	80042a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e2:	f7ff fa67 	bl	80009b4 <main>
  bx  lr    
 80014e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014f4:	08004328 	.word	0x08004328
  ldr r2, =_sbss
 80014f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014fc:	200001ac 	.word	0x200001ac

08001500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC_IRQHandler>
	...

08001504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001508:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <HAL_Init+0x40>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0d      	ldr	r2, [pc, #52]	@ (8001544 <HAL_Init+0x40>)
 800150e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001514:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <HAL_Init+0x40>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <HAL_Init+0x40>)
 800151a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800151e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001520:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a07      	ldr	r2, [pc, #28]	@ (8001544 <HAL_Init+0x40>)
 8001526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800152a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152c:	2003      	movs	r0, #3
 800152e:	f000 fec3 	bl	80022b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001532:	2000      	movs	r0, #0
 8001534:	f000 f808 	bl	8001548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001538:	f7ff faf6 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023c00 	.word	0x40023c00

08001548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <HAL_InitTick+0x54>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <HAL_InitTick+0x58>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800155e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001562:	fbb2 f3f3 	udiv	r3, r2, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f000 fedb 	bl	8002322 <HAL_SYSTICK_Config>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e00e      	b.n	8001594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d80a      	bhi.n	8001592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800157c:	2200      	movs	r2, #0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f000 fea3 	bl	80022ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001588:	4a06      	ldr	r2, [pc, #24]	@ (80015a4 <HAL_InitTick+0x5c>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e000      	b.n	8001594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000008 	.word	0x20000008
 80015a4:	20000004 	.word	0x20000004

080015a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <HAL_IncTick+0x20>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_IncTick+0x24>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a04      	ldr	r2, [pc, #16]	@ (80015cc <HAL_IncTick+0x24>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000008 	.word	0x20000008
 80015cc:	200001a8 	.word	0x200001a8

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b03      	ldr	r3, [pc, #12]	@ (80015e4 <HAL_GetTick+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	200001a8 	.word	0x200001a8

080015e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0ed      	b.n	80017d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7fe ffe6 	bl	80005d8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0201 	orr.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800161c:	f7ff ffd8 	bl	80015d0 <HAL_GetTick>
 8001620:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001622:	e012      	b.n	800164a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001624:	f7ff ffd4 	bl	80015d0 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b0a      	cmp	r3, #10
 8001630:	d90b      	bls.n	800164a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001636:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2205      	movs	r2, #5
 8001642:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e0c5      	b.n	80017d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0e5      	beq.n	8001624 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0202 	bic.w	r2, r2, #2
 8001666:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001668:	f7ff ffb2 	bl	80015d0 <HAL_GetTick>
 800166c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800166e:	e012      	b.n	8001696 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001670:	f7ff ffae 	bl	80015d0 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b0a      	cmp	r3, #10
 800167c:	d90b      	bls.n	8001696 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001682:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2205      	movs	r2, #5
 800168e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e09f      	b.n	80017d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1e5      	bne.n	8001670 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7e1b      	ldrb	r3, [r3, #24]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d108      	bne.n	80016be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	e007      	b.n	80016ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7e5b      	ldrb	r3, [r3, #25]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d108      	bne.n	80016e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	e007      	b.n	80016f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7e9b      	ldrb	r3, [r3, #26]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d108      	bne.n	8001712 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0220 	orr.w	r2, r2, #32
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e007      	b.n	8001722 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0220 	bic.w	r2, r2, #32
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7edb      	ldrb	r3, [r3, #27]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d108      	bne.n	800173c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0210 	bic.w	r2, r2, #16
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	e007      	b.n	800174c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0210 	orr.w	r2, r2, #16
 800174a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	7f1b      	ldrb	r3, [r3, #28]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d108      	bne.n	8001766 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0208 	orr.w	r2, r2, #8
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e007      	b.n	8001776 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0208 	bic.w	r2, r2, #8
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7f5b      	ldrb	r3, [r3, #29]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0204 	orr.w	r2, r2, #4
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e007      	b.n	80017a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0204 	bic.w	r2, r2, #4
 800179e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	ea42 0103 	orr.w	r1, r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	1e5a      	subs	r2, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b087      	sub	sp, #28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017f8:	7cfb      	ldrb	r3, [r7, #19]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d003      	beq.n	8001806 <HAL_CAN_ConfigFilter+0x26>
 80017fe:	7cfb      	ldrb	r3, [r7, #19]
 8001800:	2b02      	cmp	r3, #2
 8001802:	f040 80be 	bne.w	8001982 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001806:	4b65      	ldr	r3, [pc, #404]	@ (800199c <HAL_CAN_ConfigFilter+0x1bc>)
 8001808:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001820:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	431a      	orrs	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f003 031f 	and.w	r3, r3, #31
 8001846:	2201      	movs	r2, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43db      	mvns	r3, r3
 8001858:	401a      	ands	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d123      	bne.n	80018b0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43db      	mvns	r3, r3
 8001872:	401a      	ands	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800188a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	3248      	adds	r2, #72	@ 0x48
 8001890:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018a6:	6979      	ldr	r1, [r7, #20]
 80018a8:	3348      	adds	r3, #72	@ 0x48
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	440b      	add	r3, r1
 80018ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d122      	bne.n	80018fe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	431a      	orrs	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3248      	adds	r2, #72	@ 0x48
 80018de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018f4:	6979      	ldr	r1, [r7, #20]
 80018f6:	3348      	adds	r3, #72	@ 0x48
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	440b      	add	r3, r1
 80018fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	43db      	mvns	r3, r3
 8001910:	401a      	ands	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001918:	e007      	b.n	800192a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	431a      	orrs	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d109      	bne.n	8001946 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	43db      	mvns	r3, r3
 800193c:	401a      	ands	r2, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001944:	e007      	b.n	8001956 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	431a      	orrs	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d107      	bne.n	800196e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	431a      	orrs	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001974:	f023 0201 	bic.w	r2, r3, #1
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e006      	b.n	8001990 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001986:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
  }
}
 8001990:	4618      	mov	r0, r3
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	40006400 	.word	0x40006400

080019a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d12e      	bne.n	8001a12 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2202      	movs	r2, #2
 80019b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0201 	bic.w	r2, r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019cc:	f7ff fe00 	bl	80015d0 <HAL_GetTick>
 80019d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019d2:	e012      	b.n	80019fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019d4:	f7ff fdfc 	bl	80015d0 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b0a      	cmp	r3, #10
 80019e0:	d90b      	bls.n	80019fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2205      	movs	r2, #5
 80019f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e012      	b.n	8001a20 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1e5      	bne.n	80019d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e006      	b.n	8001a20 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a16:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
  }
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a3c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a3e:	7dfb      	ldrb	r3, [r7, #23]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d003      	beq.n	8001a4c <HAL_CAN_GetRxMessage+0x24>
 8001a44:	7dfb      	ldrb	r3, [r7, #23]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	f040 8103 	bne.w	8001c52 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10e      	bne.n	8001a70 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d116      	bne.n	8001a8e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0f7      	b.n	8001c60 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d107      	bne.n	8001a8e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a82:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e0e8      	b.n	8001c60 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	331b      	adds	r3, #27
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	4413      	add	r3, r2
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0204 	and.w	r2, r3, #4
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10c      	bne.n	8001ac6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	331b      	adds	r3, #27
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	4413      	add	r3, r2
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	0d5b      	lsrs	r3, r3, #21
 8001abc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	e00b      	b.n	8001ade <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	331b      	adds	r3, #27
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	4413      	add	r3, r2
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	08db      	lsrs	r3, r3, #3
 8001ad6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	331b      	adds	r3, #27
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	4413      	add	r3, r2
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0202 	and.w	r2, r3, #2
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	331b      	adds	r3, #27
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	4413      	add	r3, r2
 8001b00:	3304      	adds	r3, #4
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2208      	movs	r2, #8
 8001b10:	611a      	str	r2, [r3, #16]
 8001b12:	e00b      	b.n	8001b2c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	331b      	adds	r3, #27
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	4413      	add	r3, r2
 8001b20:	3304      	adds	r3, #4
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 020f 	and.w	r2, r3, #15
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	331b      	adds	r3, #27
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	4413      	add	r3, r2
 8001b38:	3304      	adds	r3, #4
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	331b      	adds	r3, #27
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	4413      	add	r3, r2
 8001b50:	3304      	adds	r3, #4
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	0c1b      	lsrs	r3, r3, #16
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	4413      	add	r3, r2
 8001b66:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	0a1a      	lsrs	r2, r3, #8
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	3301      	adds	r3, #1
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	4413      	add	r3, r2
 8001b96:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0c1a      	lsrs	r2, r3, #16
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	4413      	add	r3, r2
 8001bb0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0e1a      	lsrs	r2, r3, #24
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	3303      	adds	r3, #3
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	4413      	add	r3, r2
 8001bca:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	4413      	add	r3, r2
 8001be2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	0a1a      	lsrs	r2, r3, #8
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	3305      	adds	r3, #5
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	0c1a      	lsrs	r2, r3, #16
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	3306      	adds	r3, #6
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	011b      	lsls	r3, r3, #4
 8001c14:	4413      	add	r3, r2
 8001c16:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0e1a      	lsrs	r2, r3, #24
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	3307      	adds	r3, #7
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d108      	bne.n	8001c3e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0220 	orr.w	r2, r2, #32
 8001c3a:	60da      	str	r2, [r3, #12]
 8001c3c:	e007      	b.n	8001c4e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 0220 	orr.w	r2, r2, #32
 8001c4c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e006      	b.n	8001c60 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c56:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
  }
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	371c      	adds	r7, #28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c7c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d002      	beq.n	8001c8a <HAL_CAN_ActivateNotification+0x1e>
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d109      	bne.n	8001c9e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6959      	ldr	r1, [r3, #20]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e006      	b.n	8001cac <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
  }
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	@ 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d07c      	beq.n	8001df8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d023      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f983 	bl	8002026 <HAL_CAN_TxMailbox0CompleteCallback>
 8001d20:	e016      	b.n	8001d50 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d34:	e00c      	b.n	8001d50 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d004      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d42:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d48:	e002      	b.n	8001d50 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f989 	bl	8002062 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d024      	beq.n	8001da4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f963 	bl	800203a <HAL_CAN_TxMailbox1CompleteCallback>
 8001d74:	e016      	b.n	8001da4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d004      	beq.n	8001d8a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d82:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d88:	e00c      	b.n	8001da4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d004      	beq.n	8001d9e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d9c:	e002      	b.n	8001da4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f969 	bl	8002076 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d024      	beq.n	8001df8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001db6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f943 	bl	800204e <HAL_CAN_TxMailbox2CompleteCallback>
 8001dc8:	e016      	b.n	8001df8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d004      	beq.n	8001dde <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ddc:	e00c      	b.n	8001df8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d004      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001df0:	e002      	b.n	8001df8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f949 	bl	800208a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00c      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d007      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e12:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2210      	movs	r2, #16
 8001e1a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e1c:	6a3b      	ldr	r3, [r7, #32]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00b      	beq.n	8001e3e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2208      	movs	r2, #8
 8001e36:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f930 	bl	800209e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d009      	beq.n	8001e5c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7fe fc38 	bl	80006cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00c      	beq.n	8001e80 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	f003 0310 	and.w	r3, r3, #16
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d007      	beq.n	8001e80 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e76:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2210      	movs	r2, #16
 8001e7e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00b      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2208      	movs	r2, #8
 8001e9a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f912 	bl	80020c6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d009      	beq.n	8001ec0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f8f9 	bl	80020b2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00b      	beq.n	8001ee2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d006      	beq.n	8001ee2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2210      	movs	r2, #16
 8001eda:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f8fc 	bl	80020da <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00b      	beq.n	8001f04 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d006      	beq.n	8001f04 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2208      	movs	r2, #8
 8001efc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f8f5 	bl	80020ee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d07b      	beq.n	8002006 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d072      	beq.n	8001ffe <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d008      	beq.n	8001f50 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	f043 0302 	orr.w	r3, r3, #2
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d008      	beq.n	8001f6c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	f043 0304 	orr.w	r3, r3, #4
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d043      	beq.n	8001ffe <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d03e      	beq.n	8001ffe <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f86:	2b60      	cmp	r3, #96	@ 0x60
 8001f88:	d02b      	beq.n	8001fe2 <HAL_CAN_IRQHandler+0x32a>
 8001f8a:	2b60      	cmp	r3, #96	@ 0x60
 8001f8c:	d82e      	bhi.n	8001fec <HAL_CAN_IRQHandler+0x334>
 8001f8e:	2b50      	cmp	r3, #80	@ 0x50
 8001f90:	d022      	beq.n	8001fd8 <HAL_CAN_IRQHandler+0x320>
 8001f92:	2b50      	cmp	r3, #80	@ 0x50
 8001f94:	d82a      	bhi.n	8001fec <HAL_CAN_IRQHandler+0x334>
 8001f96:	2b40      	cmp	r3, #64	@ 0x40
 8001f98:	d019      	beq.n	8001fce <HAL_CAN_IRQHandler+0x316>
 8001f9a:	2b40      	cmp	r3, #64	@ 0x40
 8001f9c:	d826      	bhi.n	8001fec <HAL_CAN_IRQHandler+0x334>
 8001f9e:	2b30      	cmp	r3, #48	@ 0x30
 8001fa0:	d010      	beq.n	8001fc4 <HAL_CAN_IRQHandler+0x30c>
 8001fa2:	2b30      	cmp	r3, #48	@ 0x30
 8001fa4:	d822      	bhi.n	8001fec <HAL_CAN_IRQHandler+0x334>
 8001fa6:	2b10      	cmp	r3, #16
 8001fa8:	d002      	beq.n	8001fb0 <HAL_CAN_IRQHandler+0x2f8>
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	d005      	beq.n	8001fba <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001fae:	e01d      	b.n	8001fec <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb2:	f043 0308 	orr.w	r3, r3, #8
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fb8:	e019      	b.n	8001fee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbc:	f043 0310 	orr.w	r3, r3, #16
 8001fc0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fc2:	e014      	b.n	8001fee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	f043 0320 	orr.w	r3, r3, #32
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fcc:	e00f      	b.n	8001fee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fd6:	e00a      	b.n	8001fee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fde:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fe0:	e005      	b.n	8001fee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fea:	e000      	b.n	8001fee <HAL_CAN_IRQHandler+0x336>
            break;
 8001fec:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699a      	ldr	r2, [r3, #24]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001ffc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2204      	movs	r2, #4
 8002004:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f872 	bl	8002102 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800201e:	bf00      	nop
 8002020:	3728      	adds	r7, #40	@ 0x28
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002128:	4b0c      	ldr	r3, [pc, #48]	@ (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002134:	4013      	ands	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002140:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214a:	4a04      	ldr	r2, [pc, #16]	@ (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	60d3      	str	r3, [r2, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002164:	4b04      	ldr	r3, [pc, #16]	@ (8002178 <__NVIC_GetPriorityGrouping+0x18>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	f003 0307 	and.w	r3, r3, #7
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	2b00      	cmp	r3, #0
 800218c:	db0b      	blt.n	80021a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	4907      	ldr	r1, [pc, #28]	@ (80021b4 <__NVIC_EnableIRQ+0x38>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2001      	movs	r0, #1
 800219e:	fa00 f202 	lsl.w	r2, r0, r2
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000e100 	.word	0xe000e100

080021b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db0a      	blt.n	80021e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	490c      	ldr	r1, [pc, #48]	@ (8002204 <__NVIC_SetPriority+0x4c>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	440b      	add	r3, r1
 80021dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e0:	e00a      	b.n	80021f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4908      	ldr	r1, [pc, #32]	@ (8002208 <__NVIC_SetPriority+0x50>)
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3b04      	subs	r3, #4
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	440b      	add	r3, r1
 80021f6:	761a      	strb	r2, [r3, #24]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000e100 	.word	0xe000e100
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	@ 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f1c3 0307 	rsb	r3, r3, #7
 8002226:	2b04      	cmp	r3, #4
 8002228:	bf28      	it	cs
 800222a:	2304      	movcs	r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3304      	adds	r3, #4
 8002232:	2b06      	cmp	r3, #6
 8002234:	d902      	bls.n	800223c <NVIC_EncodePriority+0x30>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3b03      	subs	r3, #3
 800223a:	e000      	b.n	800223e <NVIC_EncodePriority+0x32>
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	f04f 32ff 	mov.w	r2, #4294967295
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	401a      	ands	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002254:	f04f 31ff 	mov.w	r1, #4294967295
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43d9      	mvns	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	4313      	orrs	r3, r2
         );
}
 8002266:	4618      	mov	r0, r3
 8002268:	3724      	adds	r7, #36	@ 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002284:	d301      	bcc.n	800228a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002286:	2301      	movs	r3, #1
 8002288:	e00f      	b.n	80022aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228a:	4a0a      	ldr	r2, [pc, #40]	@ (80022b4 <SysTick_Config+0x40>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002292:	210f      	movs	r1, #15
 8002294:	f04f 30ff 	mov.w	r0, #4294967295
 8002298:	f7ff ff8e 	bl	80021b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229c:	4b05      	ldr	r3, [pc, #20]	@ (80022b4 <SysTick_Config+0x40>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a2:	4b04      	ldr	r3, [pc, #16]	@ (80022b4 <SysTick_Config+0x40>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000e010 	.word	0xe000e010

080022b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff29 	bl	8002118 <__NVIC_SetPriorityGrouping>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e0:	f7ff ff3e 	bl	8002160 <__NVIC_GetPriorityGrouping>
 80022e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	6978      	ldr	r0, [r7, #20]
 80022ec:	f7ff ff8e 	bl	800220c <NVIC_EncodePriority>
 80022f0:	4602      	mov	r2, r0
 80022f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff5d 	bl	80021b8 <__NVIC_SetPriority>
}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff31 	bl	800217c <__NVIC_EnableIRQ>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ffa2 	bl	8002274 <SysTick_Config>
 8002330:	4603      	mov	r3, r0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	@ 0x24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800234e:	2300      	movs	r3, #0
 8002350:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
 8002356:	e165      	b.n	8002624 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002358:	2201      	movs	r2, #1
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4013      	ands	r3, r2
 800236a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	429a      	cmp	r2, r3
 8002372:	f040 8154 	bne.w	800261e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	2b01      	cmp	r3, #1
 8002380:	d005      	beq.n	800238e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800238a:	2b02      	cmp	r3, #2
 800238c:	d130      	bne.n	80023f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	2203      	movs	r2, #3
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c4:	2201      	movs	r2, #1
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 0201 	and.w	r2, r3, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d017      	beq.n	800242c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	2203      	movs	r2, #3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d123      	bne.n	8002480 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	08da      	lsrs	r2, r3, #3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3208      	adds	r2, #8
 8002440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	220f      	movs	r2, #15
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	08da      	lsrs	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3208      	adds	r2, #8
 800247a:	69b9      	ldr	r1, [r7, #24]
 800247c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	2203      	movs	r2, #3
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 0203 	and.w	r2, r3, #3
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80ae 	beq.w	800261e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	4b5d      	ldr	r3, [pc, #372]	@ (800263c <HAL_GPIO_Init+0x300>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ca:	4a5c      	ldr	r2, [pc, #368]	@ (800263c <HAL_GPIO_Init+0x300>)
 80024cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024d2:	4b5a      	ldr	r3, [pc, #360]	@ (800263c <HAL_GPIO_Init+0x300>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024de:	4a58      	ldr	r2, [pc, #352]	@ (8002640 <HAL_GPIO_Init+0x304>)
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	089b      	lsrs	r3, r3, #2
 80024e4:	3302      	adds	r3, #2
 80024e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	220f      	movs	r2, #15
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4f      	ldr	r2, [pc, #316]	@ (8002644 <HAL_GPIO_Init+0x308>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d025      	beq.n	8002556 <HAL_GPIO_Init+0x21a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a4e      	ldr	r2, [pc, #312]	@ (8002648 <HAL_GPIO_Init+0x30c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d01f      	beq.n	8002552 <HAL_GPIO_Init+0x216>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a4d      	ldr	r2, [pc, #308]	@ (800264c <HAL_GPIO_Init+0x310>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d019      	beq.n	800254e <HAL_GPIO_Init+0x212>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a4c      	ldr	r2, [pc, #304]	@ (8002650 <HAL_GPIO_Init+0x314>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d013      	beq.n	800254a <HAL_GPIO_Init+0x20e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a4b      	ldr	r2, [pc, #300]	@ (8002654 <HAL_GPIO_Init+0x318>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00d      	beq.n	8002546 <HAL_GPIO_Init+0x20a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a4a      	ldr	r2, [pc, #296]	@ (8002658 <HAL_GPIO_Init+0x31c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d007      	beq.n	8002542 <HAL_GPIO_Init+0x206>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a49      	ldr	r2, [pc, #292]	@ (800265c <HAL_GPIO_Init+0x320>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d101      	bne.n	800253e <HAL_GPIO_Init+0x202>
 800253a:	2306      	movs	r3, #6
 800253c:	e00c      	b.n	8002558 <HAL_GPIO_Init+0x21c>
 800253e:	2307      	movs	r3, #7
 8002540:	e00a      	b.n	8002558 <HAL_GPIO_Init+0x21c>
 8002542:	2305      	movs	r3, #5
 8002544:	e008      	b.n	8002558 <HAL_GPIO_Init+0x21c>
 8002546:	2304      	movs	r3, #4
 8002548:	e006      	b.n	8002558 <HAL_GPIO_Init+0x21c>
 800254a:	2303      	movs	r3, #3
 800254c:	e004      	b.n	8002558 <HAL_GPIO_Init+0x21c>
 800254e:	2302      	movs	r3, #2
 8002550:	e002      	b.n	8002558 <HAL_GPIO_Init+0x21c>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <HAL_GPIO_Init+0x21c>
 8002556:	2300      	movs	r3, #0
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	f002 0203 	and.w	r2, r2, #3
 800255e:	0092      	lsls	r2, r2, #2
 8002560:	4093      	lsls	r3, r2
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002568:	4935      	ldr	r1, [pc, #212]	@ (8002640 <HAL_GPIO_Init+0x304>)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	089b      	lsrs	r3, r3, #2
 800256e:	3302      	adds	r3, #2
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002576:	4b3a      	ldr	r3, [pc, #232]	@ (8002660 <HAL_GPIO_Init+0x324>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800259a:	4a31      	ldr	r2, [pc, #196]	@ (8002660 <HAL_GPIO_Init+0x324>)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002660 <HAL_GPIO_Init+0x324>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025c4:	4a26      	ldr	r2, [pc, #152]	@ (8002660 <HAL_GPIO_Init+0x324>)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ca:	4b25      	ldr	r3, [pc, #148]	@ (8002660 <HAL_GPIO_Init+0x324>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002660 <HAL_GPIO_Init+0x324>)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002660 <HAL_GPIO_Init+0x324>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002618:	4a11      	ldr	r2, [pc, #68]	@ (8002660 <HAL_GPIO_Init+0x324>)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3301      	adds	r3, #1
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	2b0f      	cmp	r3, #15
 8002628:	f67f ae96 	bls.w	8002358 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	3724      	adds	r7, #36	@ 0x24
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800
 8002640:	40013800 	.word	0x40013800
 8002644:	40020000 	.word	0x40020000
 8002648:	40020400 	.word	0x40020400
 800264c:	40020800 	.word	0x40020800
 8002650:	40020c00 	.word	0x40020c00
 8002654:	40021000 	.word	0x40021000
 8002658:	40021400 	.word	0x40021400
 800265c:	40021800 	.word	0x40021800
 8002660:	40013c00 	.word	0x40013c00

08002664 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	887b      	ldrh	r3, [r7, #2]
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
 8002680:	e001      	b.n	8002686 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	807b      	strh	r3, [r7, #2]
 80026a0:	4613      	mov	r3, r2
 80026a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a4:	787b      	ldrb	r3, [r7, #1]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026aa:	887a      	ldrh	r2, [r7, #2]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026b0:	e003      	b.n	80026ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026b2:	887b      	ldrh	r3, [r7, #2]
 80026b4:	041a      	lsls	r2, r3, #16
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	619a      	str	r2, [r3, #24]
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b085      	sub	sp, #20
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	460b      	mov	r3, r1
 80026d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026d8:	887a      	ldrh	r2, [r7, #2]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4013      	ands	r3, r2
 80026de:	041a      	lsls	r2, r3, #16
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	43d9      	mvns	r1, r3
 80026e4:	887b      	ldrh	r3, [r7, #2]
 80026e6:	400b      	ands	r3, r1
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	619a      	str	r2, [r3, #24]
}
 80026ee:	bf00      	nop
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002706:	4b08      	ldr	r3, [pc, #32]	@ (8002728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	4013      	ands	r3, r2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d006      	beq.n	8002720 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002712:	4a05      	ldr	r2, [pc, #20]	@ (8002728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe f824 	bl	8000768 <HAL_GPIO_EXTI_Callback>
  }
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40013c00 	.word	0x40013c00

0800272c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0cc      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002740:	4b68      	ldr	r3, [pc, #416]	@ (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d90c      	bls.n	8002768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b65      	ldr	r3, [pc, #404]	@ (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b63      	ldr	r3, [pc, #396]	@ (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0b8      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d020      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002780:	4b59      	ldr	r3, [pc, #356]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a58      	ldr	r2, [pc, #352]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800278a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002798:	4b53      	ldr	r3, [pc, #332]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a52      	ldr	r2, [pc, #328]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a4:	4b50      	ldr	r3, [pc, #320]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	494d      	ldr	r1, [pc, #308]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d044      	beq.n	800284c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ca:	4b47      	ldr	r3, [pc, #284]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d119      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e07f      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d003      	beq.n	80027ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ea:	4b3f      	ldr	r3, [pc, #252]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e06f      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fa:	4b3b      	ldr	r3, [pc, #236]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e067      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800280a:	4b37      	ldr	r3, [pc, #220]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f023 0203 	bic.w	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4934      	ldr	r1, [pc, #208]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	4313      	orrs	r3, r2
 800281a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800281c:	f7fe fed8 	bl	80015d0 <HAL_GetTick>
 8002820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	e00a      	b.n	800283a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002824:	f7fe fed4 	bl	80015d0 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e04f      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	4b2b      	ldr	r3, [pc, #172]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 020c 	and.w	r2, r3, #12
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	429a      	cmp	r2, r3
 800284a:	d1eb      	bne.n	8002824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800284c:	4b25      	ldr	r3, [pc, #148]	@ (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d20c      	bcs.n	8002874 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b22      	ldr	r3, [pc, #136]	@ (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002862:	4b20      	ldr	r3, [pc, #128]	@ (80028e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d001      	beq.n	8002874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e032      	b.n	80028da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002880:	4b19      	ldr	r3, [pc, #100]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4916      	ldr	r1, [pc, #88]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d009      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800289e:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	490e      	ldr	r1, [pc, #56]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028b2:	f000 f821 	bl	80028f8 <HAL_RCC_GetSysClockFreq>
 80028b6:	4602      	mov	r2, r0
 80028b8:	4b0b      	ldr	r3, [pc, #44]	@ (80028e8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	490a      	ldr	r1, [pc, #40]	@ (80028ec <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	5ccb      	ldrb	r3, [r1, r3]
 80028c6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ca:	4a09      	ldr	r2, [pc, #36]	@ (80028f0 <HAL_RCC_ClockConfig+0x1c4>)
 80028cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80028ce:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <HAL_RCC_ClockConfig+0x1c8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fe38 	bl	8001548 <HAL_InitTick>

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40023c00 	.word	0x40023c00
 80028e8:	40023800 	.word	0x40023800
 80028ec:	08004308 	.word	0x08004308
 80028f0:	20000000 	.word	0x20000000
 80028f4:	20000004 	.word	0x20000004

080028f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028fc:	b0a6      	sub	sp, #152	@ 0x98
 80028fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800291e:	4bc8      	ldr	r3, [pc, #800]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x348>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b0c      	cmp	r3, #12
 8002928:	f200 817e 	bhi.w	8002c28 <HAL_RCC_GetSysClockFreq+0x330>
 800292c:	a201      	add	r2, pc, #4	@ (adr r2, 8002934 <HAL_RCC_GetSysClockFreq+0x3c>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002969 	.word	0x08002969
 8002938:	08002c29 	.word	0x08002c29
 800293c:	08002c29 	.word	0x08002c29
 8002940:	08002c29 	.word	0x08002c29
 8002944:	08002971 	.word	0x08002971
 8002948:	08002c29 	.word	0x08002c29
 800294c:	08002c29 	.word	0x08002c29
 8002950:	08002c29 	.word	0x08002c29
 8002954:	08002979 	.word	0x08002979
 8002958:	08002c29 	.word	0x08002c29
 800295c:	08002c29 	.word	0x08002c29
 8002960:	08002c29 	.word	0x08002c29
 8002964:	08002ae3 	.word	0x08002ae3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002968:	4bb6      	ldr	r3, [pc, #728]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x34c>)
 800296a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800296e:	e15f      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002970:	4bb5      	ldr	r3, [pc, #724]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x350>)
 8002972:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002976:	e15b      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002978:	4bb1      	ldr	r3, [pc, #708]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x348>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002980:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002984:	4bae      	ldr	r3, [pc, #696]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x348>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d031      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002990:	4bab      	ldr	r3, [pc, #684]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x348>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	099b      	lsrs	r3, r3, #6
 8002996:	2200      	movs	r2, #0
 8002998:	66bb      	str	r3, [r7, #104]	@ 0x68
 800299a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800299c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800299e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80029a4:	2300      	movs	r3, #0
 80029a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80029a8:	4ba7      	ldr	r3, [pc, #668]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x350>)
 80029aa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80029ae:	462a      	mov	r2, r5
 80029b0:	fb03 f202 	mul.w	r2, r3, r2
 80029b4:	2300      	movs	r3, #0
 80029b6:	4621      	mov	r1, r4
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	4aa2      	ldr	r2, [pc, #648]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x350>)
 80029c0:	4621      	mov	r1, r4
 80029c2:	fba1 1202 	umull	r1, r2, r1, r2
 80029c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80029c8:	460a      	mov	r2, r1
 80029ca:	67ba      	str	r2, [r7, #120]	@ 0x78
 80029cc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80029ce:	4413      	add	r3, r2
 80029d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80029d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029d6:	2200      	movs	r2, #0
 80029d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029da:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80029dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029e0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80029e4:	f7fd fc0e 	bl	8000204 <__aeabi_uldivmod>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4613      	mov	r3, r2
 80029ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80029f2:	e064      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f4:	4b92      	ldr	r3, [pc, #584]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x348>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	099b      	lsrs	r3, r3, #6
 80029fa:	2200      	movs	r2, #0
 80029fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80029fe:	657a      	str	r2, [r7, #84]	@ 0x54
 8002a00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a08:	2300      	movs	r3, #0
 8002a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a0c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002a10:	4622      	mov	r2, r4
 8002a12:	462b      	mov	r3, r5
 8002a14:	f04f 0000 	mov.w	r0, #0
 8002a18:	f04f 0100 	mov.w	r1, #0
 8002a1c:	0159      	lsls	r1, r3, #5
 8002a1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a22:	0150      	lsls	r0, r2, #5
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4621      	mov	r1, r4
 8002a2a:	1a51      	subs	r1, r2, r1
 8002a2c:	6139      	str	r1, [r7, #16]
 8002a2e:	4629      	mov	r1, r5
 8002a30:	eb63 0301 	sbc.w	r3, r3, r1
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a42:	4659      	mov	r1, fp
 8002a44:	018b      	lsls	r3, r1, #6
 8002a46:	4651      	mov	r1, sl
 8002a48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a4c:	4651      	mov	r1, sl
 8002a4e:	018a      	lsls	r2, r1, #6
 8002a50:	4651      	mov	r1, sl
 8002a52:	ebb2 0801 	subs.w	r8, r2, r1
 8002a56:	4659      	mov	r1, fp
 8002a58:	eb63 0901 	sbc.w	r9, r3, r1
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a70:	4690      	mov	r8, r2
 8002a72:	4699      	mov	r9, r3
 8002a74:	4623      	mov	r3, r4
 8002a76:	eb18 0303 	adds.w	r3, r8, r3
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	462b      	mov	r3, r5
 8002a7e:	eb49 0303 	adc.w	r3, r9, r3
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a90:	4629      	mov	r1, r5
 8002a92:	028b      	lsls	r3, r1, #10
 8002a94:	4621      	mov	r1, r4
 8002a96:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	028a      	lsls	r2, r1, #10
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002aaa:	647a      	str	r2, [r7, #68]	@ 0x44
 8002aac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002ab0:	f7fd fba8 	bl	8000204 <__aeabi_uldivmod>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4613      	mov	r3, r2
 8002aba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002abe:	4b60      	ldr	r3, [pc, #384]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	0c1b      	lsrs	r3, r3, #16
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	3301      	adds	r3, #1
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002ad0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002adc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002ae0:	e0a6      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ae2:	4b57      	ldr	r3, [pc, #348]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002aea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aee:	4b54      	ldr	r3, [pc, #336]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x348>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d02a      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afa:	4b51      	ldr	r3, [pc, #324]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x348>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	099b      	lsrs	r3, r3, #6
 8002b00:	2200      	movs	r2, #0
 8002b02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4b4e      	ldr	r3, [pc, #312]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x350>)
 8002b10:	fb03 f201 	mul.w	r2, r3, r1
 8002b14:	2300      	movs	r3, #0
 8002b16:	fb00 f303 	mul.w	r3, r0, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	4a4a      	ldr	r2, [pc, #296]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x350>)
 8002b1e:	fba0 1202 	umull	r1, r2, r0, r2
 8002b22:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b24:	460a      	mov	r2, r1
 8002b26:	673a      	str	r2, [r7, #112]	@ 0x70
 8002b28:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002b2a:	4413      	add	r3, r2
 8002b2c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b32:	2200      	movs	r2, #0
 8002b34:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b36:	637a      	str	r2, [r7, #52]	@ 0x34
 8002b38:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002b3c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002b40:	f7fd fb60 	bl	8000204 <__aeabi_uldivmod>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4613      	mov	r3, r2
 8002b4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b4e:	e05b      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b50:	4b3b      	ldr	r3, [pc, #236]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	099b      	lsrs	r3, r3, #6
 8002b56:	2200      	movs	r2, #0
 8002b58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b62:	623b      	str	r3, [r7, #32]
 8002b64:	2300      	movs	r3, #0
 8002b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b6c:	4642      	mov	r2, r8
 8002b6e:	464b      	mov	r3, r9
 8002b70:	f04f 0000 	mov.w	r0, #0
 8002b74:	f04f 0100 	mov.w	r1, #0
 8002b78:	0159      	lsls	r1, r3, #5
 8002b7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b7e:	0150      	lsls	r0, r2, #5
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4641      	mov	r1, r8
 8002b86:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b8a:	4649      	mov	r1, r9
 8002b8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ba0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ba4:	ebb2 040a 	subs.w	r4, r2, sl
 8002ba8:	eb63 050b 	sbc.w	r5, r3, fp
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	00eb      	lsls	r3, r5, #3
 8002bb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bba:	00e2      	lsls	r2, r4, #3
 8002bbc:	4614      	mov	r4, r2
 8002bbe:	461d      	mov	r5, r3
 8002bc0:	4643      	mov	r3, r8
 8002bc2:	18e3      	adds	r3, r4, r3
 8002bc4:	603b      	str	r3, [r7, #0]
 8002bc6:	464b      	mov	r3, r9
 8002bc8:	eb45 0303 	adc.w	r3, r5, r3
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bda:	4629      	mov	r1, r5
 8002bdc:	028b      	lsls	r3, r1, #10
 8002bde:	4621      	mov	r1, r4
 8002be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002be4:	4621      	mov	r1, r4
 8002be6:	028a      	lsls	r2, r1, #10
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	61fa      	str	r2, [r7, #28]
 8002bf6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bfa:	f7fd fb03 	bl	8000204 <__aeabi_uldivmod>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4613      	mov	r3, r2
 8002c04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c08:	4b0d      	ldr	r3, [pc, #52]	@ (8002c40 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	0f1b      	lsrs	r3, r3, #28
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002c16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002c26:	e003      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c28:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002c2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002c2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3798      	adds	r7, #152	@ 0x98
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800
 8002c44:	00f42400 	.word	0x00f42400
 8002c48:	017d7840 	.word	0x017d7840

08002c4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e28d      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 8083 	beq.w	8002d72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c6c:	4b94      	ldr	r3, [pc, #592]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d019      	beq.n	8002cac <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c78:	4b91      	ldr	r3, [pc, #580]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c84:	4b8e      	ldr	r3, [pc, #568]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c90:	d00c      	beq.n	8002cac <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c92:	4b8b      	ldr	r3, [pc, #556]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c9a:	2b0c      	cmp	r3, #12
 8002c9c:	d112      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c9e:	4b88      	ldr	r3, [pc, #544]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ca6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002caa:	d10b      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cac:	4b84      	ldr	r3, [pc, #528]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d05b      	beq.n	8002d70 <HAL_RCC_OscConfig+0x124>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d157      	bne.n	8002d70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e25a      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ccc:	d106      	bne.n	8002cdc <HAL_RCC_OscConfig+0x90>
 8002cce:	4b7c      	ldr	r3, [pc, #496]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a7b      	ldr	r2, [pc, #492]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e01d      	b.n	8002d18 <HAL_RCC_OscConfig+0xcc>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCC_OscConfig+0xb4>
 8002ce6:	4b76      	ldr	r3, [pc, #472]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a75      	ldr	r2, [pc, #468]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002cec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	4b73      	ldr	r3, [pc, #460]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a72      	ldr	r2, [pc, #456]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e00b      	b.n	8002d18 <HAL_RCC_OscConfig+0xcc>
 8002d00:	4b6f      	ldr	r3, [pc, #444]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a6e      	ldr	r2, [pc, #440]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a6b      	ldr	r2, [pc, #428]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d013      	beq.n	8002d48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe fc56 	bl	80015d0 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d28:	f7fe fc52 	bl	80015d0 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	@ 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e21f      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3a:	4b61      	ldr	r3, [pc, #388]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0xdc>
 8002d46:	e014      	b.n	8002d72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe fc42 	bl	80015d0 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d50:	f7fe fc3e 	bl	80015d0 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	@ 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e20b      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d62:	4b57      	ldr	r3, [pc, #348]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x104>
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d06f      	beq.n	8002e5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d7e:	4b50      	ldr	r3, [pc, #320]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d017      	beq.n	8002dba <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d8a:	4b4d      	ldr	r3, [pc, #308]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d105      	bne.n	8002da2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d96:	4b4a      	ldr	r3, [pc, #296]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00b      	beq.n	8002dba <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002da2:	4b47      	ldr	r3, [pc, #284]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002daa:	2b0c      	cmp	r3, #12
 8002dac:	d11c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dae:	4b44      	ldr	r3, [pc, #272]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d116      	bne.n	8002de8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dba:	4b41      	ldr	r3, [pc, #260]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x186>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d001      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e1d3      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4937      	ldr	r1, [pc, #220]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de6:	e03a      	b.n	8002e5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df0:	4b34      	ldr	r3, [pc, #208]	@ (8002ec4 <HAL_RCC_OscConfig+0x278>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df6:	f7fe fbeb 	bl	80015d0 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfe:	f7fe fbe7 	bl	80015d0 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e1b4      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e10:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1c:	4b28      	ldr	r3, [pc, #160]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4925      	ldr	r1, [pc, #148]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	600b      	str	r3, [r1, #0]
 8002e30:	e015      	b.n	8002e5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e32:	4b24      	ldr	r3, [pc, #144]	@ (8002ec4 <HAL_RCC_OscConfig+0x278>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe fbca 	bl	80015d0 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e40:	f7fe fbc6 	bl	80015d0 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e193      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e52:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d036      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d016      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e72:	4b15      	ldr	r3, [pc, #84]	@ (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e78:	f7fe fbaa 	bl	80015d0 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e80:	f7fe fba6 	bl	80015d0 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e173      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e92:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_RCC_OscConfig+0x274>)
 8002e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x234>
 8002e9e:	e01b      	b.n	8002ed8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea0:	4b09      	ldr	r3, [pc, #36]	@ (8002ec8 <HAL_RCC_OscConfig+0x27c>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea6:	f7fe fb93 	bl	80015d0 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eac:	e00e      	b.n	8002ecc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eae:	f7fe fb8f 	bl	80015d0 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d907      	bls.n	8002ecc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e15c      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	42470000 	.word	0x42470000
 8002ec8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ecc:	4b8a      	ldr	r3, [pc, #552]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002ece:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1ea      	bne.n	8002eae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8097 	beq.w	8003014 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eea:	4b83      	ldr	r3, [pc, #524]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10f      	bne.n	8002f16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	4b7f      	ldr	r3, [pc, #508]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efe:	4a7e      	ldr	r2, [pc, #504]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f06:	4b7c      	ldr	r3, [pc, #496]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f12:	2301      	movs	r3, #1
 8002f14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f16:	4b79      	ldr	r3, [pc, #484]	@ (80030fc <HAL_RCC_OscConfig+0x4b0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d118      	bne.n	8002f54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f22:	4b76      	ldr	r3, [pc, #472]	@ (80030fc <HAL_RCC_OscConfig+0x4b0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a75      	ldr	r2, [pc, #468]	@ (80030fc <HAL_RCC_OscConfig+0x4b0>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fb4f 	bl	80015d0 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f36:	f7fe fb4b 	bl	80015d0 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e118      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f48:	4b6c      	ldr	r3, [pc, #432]	@ (80030fc <HAL_RCC_OscConfig+0x4b0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d106      	bne.n	8002f6a <HAL_RCC_OscConfig+0x31e>
 8002f5c:	4b66      	ldr	r3, [pc, #408]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f60:	4a65      	ldr	r2, [pc, #404]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f68:	e01c      	b.n	8002fa4 <HAL_RCC_OscConfig+0x358>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b05      	cmp	r3, #5
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x340>
 8002f72:	4b61      	ldr	r3, [pc, #388]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f76:	4a60      	ldr	r2, [pc, #384]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f78:	f043 0304 	orr.w	r3, r3, #4
 8002f7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f7e:	4b5e      	ldr	r3, [pc, #376]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f82:	4a5d      	ldr	r2, [pc, #372]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f8a:	e00b      	b.n	8002fa4 <HAL_RCC_OscConfig+0x358>
 8002f8c:	4b5a      	ldr	r3, [pc, #360]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f90:	4a59      	ldr	r2, [pc, #356]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f98:	4b57      	ldr	r3, [pc, #348]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9c:	4a56      	ldr	r2, [pc, #344]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002f9e:	f023 0304 	bic.w	r3, r3, #4
 8002fa2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d015      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fac:	f7fe fb10 	bl	80015d0 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb4:	f7fe fb0c 	bl	80015d0 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e0d7      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fca:	4b4b      	ldr	r3, [pc, #300]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0ee      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x368>
 8002fd6:	e014      	b.n	8003002 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd8:	f7fe fafa 	bl	80015d0 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe0:	f7fe faf6 	bl	80015d0 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e0c1      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff6:	4b40      	ldr	r3, [pc, #256]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1ee      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003002:	7dfb      	ldrb	r3, [r7, #23]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d105      	bne.n	8003014 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003008:	4b3b      	ldr	r3, [pc, #236]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 800300a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300c:	4a3a      	ldr	r2, [pc, #232]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 800300e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003012:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80ad 	beq.w	8003178 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800301e:	4b36      	ldr	r3, [pc, #216]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b08      	cmp	r3, #8
 8003028:	d060      	beq.n	80030ec <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d145      	bne.n	80030be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003032:	4b33      	ldr	r3, [pc, #204]	@ (8003100 <HAL_RCC_OscConfig+0x4b4>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7fe faca 	bl	80015d0 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003040:	f7fe fac6 	bl	80015d0 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e093      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003052:	4b29      	ldr	r3, [pc, #164]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306c:	019b      	lsls	r3, r3, #6
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003074:	085b      	lsrs	r3, r3, #1
 8003076:	3b01      	subs	r3, #1
 8003078:	041b      	lsls	r3, r3, #16
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003088:	071b      	lsls	r3, r3, #28
 800308a:	491b      	ldr	r1, [pc, #108]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003090:	4b1b      	ldr	r3, [pc, #108]	@ (8003100 <HAL_RCC_OscConfig+0x4b4>)
 8003092:	2201      	movs	r2, #1
 8003094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003096:	f7fe fa9b 	bl	80015d0 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309e:	f7fe fa97 	bl	80015d0 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e064      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b0:	4b11      	ldr	r3, [pc, #68]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x452>
 80030bc:	e05c      	b.n	8003178 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030be:	4b10      	ldr	r3, [pc, #64]	@ (8003100 <HAL_RCC_OscConfig+0x4b4>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fe fa84 	bl	80015d0 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030cc:	f7fe fa80 	bl	80015d0 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e04d      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030de:	4b06      	ldr	r3, [pc, #24]	@ (80030f8 <HAL_RCC_OscConfig+0x4ac>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x480>
 80030ea:	e045      	b.n	8003178 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d107      	bne.n	8003104 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e040      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40007000 	.word	0x40007000
 8003100:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003104:	4b1f      	ldr	r3, [pc, #124]	@ (8003184 <HAL_RCC_OscConfig+0x538>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d030      	beq.n	8003174 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311c:	429a      	cmp	r2, r3
 800311e:	d129      	bne.n	8003174 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d122      	bne.n	8003174 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003134:	4013      	ands	r3, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800313a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800313c:	4293      	cmp	r3, r2
 800313e:	d119      	bne.n	8003174 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314a:	085b      	lsrs	r3, r3, #1
 800314c:	3b01      	subs	r3, #1
 800314e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d10f      	bne.n	8003174 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d107      	bne.n	8003174 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d001      	beq.n	8003178 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800

08003188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e041      	b.n	800321e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fd ff44 	bl	800103c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3304      	adds	r3, #4
 80031c4:	4619      	mov	r1, r3
 80031c6:	4610      	mov	r0, r2
 80031c8:	f000 fcba 	bl	8003b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d001      	beq.n	8003240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e04e      	b.n	80032de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a23      	ldr	r2, [pc, #140]	@ (80032ec <HAL_TIM_Base_Start_IT+0xc4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d022      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800326a:	d01d      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a1f      	ldr	r2, [pc, #124]	@ (80032f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d018      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1e      	ldr	r2, [pc, #120]	@ (80032f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d013      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1c      	ldr	r2, [pc, #112]	@ (80032f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00e      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1b      	ldr	r2, [pc, #108]	@ (80032fc <HAL_TIM_Base_Start_IT+0xd4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d009      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a19      	ldr	r2, [pc, #100]	@ (8003300 <HAL_TIM_Base_Start_IT+0xd8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d004      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a18      	ldr	r2, [pc, #96]	@ (8003304 <HAL_TIM_Base_Start_IT+0xdc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d111      	bne.n	80032cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b06      	cmp	r3, #6
 80032b8:	d010      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0201 	orr.w	r2, r2, #1
 80032c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ca:	e007      	b.n	80032dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40010000 	.word	0x40010000
 80032f0:	40000400 	.word	0x40000400
 80032f4:	40000800 	.word	0x40000800
 80032f8:	40000c00 	.word	0x40000c00
 80032fc:	40010400 	.word	0x40010400
 8003300:	40014000 	.word	0x40014000
 8003304:	40001800 	.word	0x40001800

08003308 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e041      	b.n	800339e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f839 	bl	80033a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3304      	adds	r3, #4
 8003344:	4619      	mov	r1, r3
 8003346:	4610      	mov	r0, r2
 8003348:	f000 fbfa 	bl	8003b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d109      	bne.n	80033e4 <HAL_TIM_PWM_Start_IT+0x28>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b01      	cmp	r3, #1
 80033da:	bf14      	ite	ne
 80033dc:	2301      	movne	r3, #1
 80033de:	2300      	moveq	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	e022      	b.n	800342a <HAL_TIM_PWM_Start_IT+0x6e>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d109      	bne.n	80033fe <HAL_TIM_PWM_Start_IT+0x42>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	bf14      	ite	ne
 80033f6:	2301      	movne	r3, #1
 80033f8:	2300      	moveq	r3, #0
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	e015      	b.n	800342a <HAL_TIM_PWM_Start_IT+0x6e>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b08      	cmp	r3, #8
 8003402:	d109      	bne.n	8003418 <HAL_TIM_PWM_Start_IT+0x5c>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	bf14      	ite	ne
 8003410:	2301      	movne	r3, #1
 8003412:	2300      	moveq	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	e008      	b.n	800342a <HAL_TIM_PWM_Start_IT+0x6e>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b01      	cmp	r3, #1
 8003422:	bf14      	ite	ne
 8003424:	2301      	movne	r3, #1
 8003426:	2300      	moveq	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e0c7      	b.n	80035c2 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d104      	bne.n	8003442 <HAL_TIM_PWM_Start_IT+0x86>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003440:	e013      	b.n	800346a <HAL_TIM_PWM_Start_IT+0xae>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b04      	cmp	r3, #4
 8003446:	d104      	bne.n	8003452 <HAL_TIM_PWM_Start_IT+0x96>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003450:	e00b      	b.n	800346a <HAL_TIM_PWM_Start_IT+0xae>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b08      	cmp	r3, #8
 8003456:	d104      	bne.n	8003462 <HAL_TIM_PWM_Start_IT+0xa6>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003460:	e003      	b.n	800346a <HAL_TIM_PWM_Start_IT+0xae>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b0c      	cmp	r3, #12
 800346e:	d841      	bhi.n	80034f4 <HAL_TIM_PWM_Start_IT+0x138>
 8003470:	a201      	add	r2, pc, #4	@ (adr r2, 8003478 <HAL_TIM_PWM_Start_IT+0xbc>)
 8003472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003476:	bf00      	nop
 8003478:	080034ad 	.word	0x080034ad
 800347c:	080034f5 	.word	0x080034f5
 8003480:	080034f5 	.word	0x080034f5
 8003484:	080034f5 	.word	0x080034f5
 8003488:	080034bf 	.word	0x080034bf
 800348c:	080034f5 	.word	0x080034f5
 8003490:	080034f5 	.word	0x080034f5
 8003494:	080034f5 	.word	0x080034f5
 8003498:	080034d1 	.word	0x080034d1
 800349c:	080034f5 	.word	0x080034f5
 80034a0:	080034f5 	.word	0x080034f5
 80034a4:	080034f5 	.word	0x080034f5
 80034a8:	080034e3 	.word	0x080034e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0202 	orr.w	r2, r2, #2
 80034ba:	60da      	str	r2, [r3, #12]
      break;
 80034bc:	e01d      	b.n	80034fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0204 	orr.w	r2, r2, #4
 80034cc:	60da      	str	r2, [r3, #12]
      break;
 80034ce:	e014      	b.n	80034fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0208 	orr.w	r2, r2, #8
 80034de:	60da      	str	r2, [r3, #12]
      break;
 80034e0:	e00b      	b.n	80034fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0210 	orr.w	r2, r2, #16
 80034f0:	60da      	str	r2, [r3, #12]
      break;
 80034f2:	e002      	b.n	80034fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
      break;
 80034f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d15f      	bne.n	80035c0 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2201      	movs	r2, #1
 8003506:	6839      	ldr	r1, [r7, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fe0f 	bl	800412c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2e      	ldr	r2, [pc, #184]	@ (80035cc <HAL_TIM_PWM_Start_IT+0x210>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d004      	beq.n	8003522 <HAL_TIM_PWM_Start_IT+0x166>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a2c      	ldr	r2, [pc, #176]	@ (80035d0 <HAL_TIM_PWM_Start_IT+0x214>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d101      	bne.n	8003526 <HAL_TIM_PWM_Start_IT+0x16a>
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <HAL_TIM_PWM_Start_IT+0x16c>
 8003526:	2300      	movs	r3, #0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d007      	beq.n	800353c <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800353a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a22      	ldr	r2, [pc, #136]	@ (80035cc <HAL_TIM_PWM_Start_IT+0x210>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d022      	beq.n	800358c <HAL_TIM_PWM_Start_IT+0x1d0>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800354e:	d01d      	beq.n	800358c <HAL_TIM_PWM_Start_IT+0x1d0>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a1f      	ldr	r2, [pc, #124]	@ (80035d4 <HAL_TIM_PWM_Start_IT+0x218>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d018      	beq.n	800358c <HAL_TIM_PWM_Start_IT+0x1d0>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a1e      	ldr	r2, [pc, #120]	@ (80035d8 <HAL_TIM_PWM_Start_IT+0x21c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d013      	beq.n	800358c <HAL_TIM_PWM_Start_IT+0x1d0>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a1c      	ldr	r2, [pc, #112]	@ (80035dc <HAL_TIM_PWM_Start_IT+0x220>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00e      	beq.n	800358c <HAL_TIM_PWM_Start_IT+0x1d0>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a17      	ldr	r2, [pc, #92]	@ (80035d0 <HAL_TIM_PWM_Start_IT+0x214>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d009      	beq.n	800358c <HAL_TIM_PWM_Start_IT+0x1d0>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a18      	ldr	r2, [pc, #96]	@ (80035e0 <HAL_TIM_PWM_Start_IT+0x224>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d004      	beq.n	800358c <HAL_TIM_PWM_Start_IT+0x1d0>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a17      	ldr	r2, [pc, #92]	@ (80035e4 <HAL_TIM_PWM_Start_IT+0x228>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d111      	bne.n	80035b0 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b06      	cmp	r3, #6
 800359c:	d010      	beq.n	80035c0 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f042 0201 	orr.w	r2, r2, #1
 80035ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ae:	e007      	b.n	80035c0 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40010000 	.word	0x40010000
 80035d0:	40010400 	.word	0x40010400
 80035d4:	40000400 	.word	0x40000400
 80035d8:	40000800 	.word	0x40000800
 80035dc:	40000c00 	.word	0x40000c00
 80035e0:	40014000 	.word	0x40014000
 80035e4:	40001800 	.word	0x40001800

080035e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d020      	beq.n	800364c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d01b      	beq.n	800364c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0202 	mvn.w	r2, #2
 800361c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fa65 	bl	8003b02 <HAL_TIM_IC_CaptureCallback>
 8003638:	e005      	b.n	8003646 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fa57 	bl	8003aee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fa68 	bl	8003b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	d020      	beq.n	8003698 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01b      	beq.n	8003698 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0204 	mvn.w	r2, #4
 8003668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2202      	movs	r2, #2
 800366e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fa3f 	bl	8003b02 <HAL_TIM_IC_CaptureCallback>
 8003684:	e005      	b.n	8003692 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fa31 	bl	8003aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fa42 	bl	8003b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d020      	beq.n	80036e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d01b      	beq.n	80036e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0208 	mvn.w	r2, #8
 80036b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2204      	movs	r2, #4
 80036ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fa19 	bl	8003b02 <HAL_TIM_IC_CaptureCallback>
 80036d0:	e005      	b.n	80036de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fa0b 	bl	8003aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fa1c 	bl	8003b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d020      	beq.n	8003730 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01b      	beq.n	8003730 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0210 	mvn.w	r2, #16
 8003700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2208      	movs	r2, #8
 8003706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f9f3 	bl	8003b02 <HAL_TIM_IC_CaptureCallback>
 800371c:	e005      	b.n	800372a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f9e5 	bl	8003aee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f9f6 	bl	8003b16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00c      	beq.n	8003754 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d007      	beq.n	8003754 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0201 	mvn.w	r2, #1
 800374c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f9c3 	bl	8003ada <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00c      	beq.n	8003778 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fd86 	bl	8004284 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00c      	beq.n	800379c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d007      	beq.n	800379c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f9c7 	bl	8003b2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00c      	beq.n	80037c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d007      	beq.n	80037c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0220 	mvn.w	r2, #32
 80037b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fd58 	bl	8004270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d101      	bne.n	80037e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e0ae      	b.n	8003944 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b0c      	cmp	r3, #12
 80037f2:	f200 809f 	bhi.w	8003934 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80037f6:	a201      	add	r2, pc, #4	@ (adr r2, 80037fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fc:	08003831 	.word	0x08003831
 8003800:	08003935 	.word	0x08003935
 8003804:	08003935 	.word	0x08003935
 8003808:	08003935 	.word	0x08003935
 800380c:	08003871 	.word	0x08003871
 8003810:	08003935 	.word	0x08003935
 8003814:	08003935 	.word	0x08003935
 8003818:	08003935 	.word	0x08003935
 800381c:	080038b3 	.word	0x080038b3
 8003820:	08003935 	.word	0x08003935
 8003824:	08003935 	.word	0x08003935
 8003828:	08003935 	.word	0x08003935
 800382c:	080038f3 	.word	0x080038f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fa2e 	bl	8003c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0208 	orr.w	r2, r2, #8
 800384a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0204 	bic.w	r2, r2, #4
 800385a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6999      	ldr	r1, [r3, #24]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	619a      	str	r2, [r3, #24]
      break;
 800386e:	e064      	b.n	800393a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68b9      	ldr	r1, [r7, #8]
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fa7e 	bl	8003d78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699a      	ldr	r2, [r3, #24]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800388a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800389a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6999      	ldr	r1, [r3, #24]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	021a      	lsls	r2, r3, #8
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	619a      	str	r2, [r3, #24]
      break;
 80038b0:	e043      	b.n	800393a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fad3 	bl	8003e64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69da      	ldr	r2, [r3, #28]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0208 	orr.w	r2, r2, #8
 80038cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0204 	bic.w	r2, r2, #4
 80038dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69d9      	ldr	r1, [r3, #28]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	61da      	str	r2, [r3, #28]
      break;
 80038f0:	e023      	b.n	800393a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68b9      	ldr	r1, [r7, #8]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fb27 	bl	8003f4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69da      	ldr	r2, [r3, #28]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800390c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	69da      	ldr	r2, [r3, #28]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800391c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69d9      	ldr	r1, [r3, #28]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	021a      	lsls	r2, r3, #8
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	61da      	str	r2, [r3, #28]
      break;
 8003932:	e002      	b.n	800393a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	75fb      	strb	r3, [r7, #23]
      break;
 8003938:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003942:	7dfb      	ldrb	r3, [r7, #23]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_TIM_ConfigClockSource+0x1c>
 8003964:	2302      	movs	r3, #2
 8003966:	e0b4      	b.n	8003ad2 <HAL_TIM_ConfigClockSource+0x186>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003986:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800398e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039a0:	d03e      	beq.n	8003a20 <HAL_TIM_ConfigClockSource+0xd4>
 80039a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039a6:	f200 8087 	bhi.w	8003ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80039aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ae:	f000 8086 	beq.w	8003abe <HAL_TIM_ConfigClockSource+0x172>
 80039b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039b6:	d87f      	bhi.n	8003ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80039b8:	2b70      	cmp	r3, #112	@ 0x70
 80039ba:	d01a      	beq.n	80039f2 <HAL_TIM_ConfigClockSource+0xa6>
 80039bc:	2b70      	cmp	r3, #112	@ 0x70
 80039be:	d87b      	bhi.n	8003ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80039c0:	2b60      	cmp	r3, #96	@ 0x60
 80039c2:	d050      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0x11a>
 80039c4:	2b60      	cmp	r3, #96	@ 0x60
 80039c6:	d877      	bhi.n	8003ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80039c8:	2b50      	cmp	r3, #80	@ 0x50
 80039ca:	d03c      	beq.n	8003a46 <HAL_TIM_ConfigClockSource+0xfa>
 80039cc:	2b50      	cmp	r3, #80	@ 0x50
 80039ce:	d873      	bhi.n	8003ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80039d0:	2b40      	cmp	r3, #64	@ 0x40
 80039d2:	d058      	beq.n	8003a86 <HAL_TIM_ConfigClockSource+0x13a>
 80039d4:	2b40      	cmp	r3, #64	@ 0x40
 80039d6:	d86f      	bhi.n	8003ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80039d8:	2b30      	cmp	r3, #48	@ 0x30
 80039da:	d064      	beq.n	8003aa6 <HAL_TIM_ConfigClockSource+0x15a>
 80039dc:	2b30      	cmp	r3, #48	@ 0x30
 80039de:	d86b      	bhi.n	8003ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d060      	beq.n	8003aa6 <HAL_TIM_ConfigClockSource+0x15a>
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d867      	bhi.n	8003ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d05c      	beq.n	8003aa6 <HAL_TIM_ConfigClockSource+0x15a>
 80039ec:	2b10      	cmp	r3, #16
 80039ee:	d05a      	beq.n	8003aa6 <HAL_TIM_ConfigClockSource+0x15a>
 80039f0:	e062      	b.n	8003ab8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a02:	f000 fb73 	bl	80040ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	609a      	str	r2, [r3, #8]
      break;
 8003a1e:	e04f      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a30:	f000 fb5c 	bl	80040ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a42:	609a      	str	r2, [r3, #8]
      break;
 8003a44:	e03c      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a52:	461a      	mov	r2, r3
 8003a54:	f000 fad0 	bl	8003ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2150      	movs	r1, #80	@ 0x50
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fb29 	bl	80040b6 <TIM_ITRx_SetConfig>
      break;
 8003a64:	e02c      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a72:	461a      	mov	r2, r3
 8003a74:	f000 faef 	bl	8004056 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2160      	movs	r1, #96	@ 0x60
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 fb19 	bl	80040b6 <TIM_ITRx_SetConfig>
      break;
 8003a84:	e01c      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a92:	461a      	mov	r2, r3
 8003a94:	f000 fab0 	bl	8003ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2140      	movs	r1, #64	@ 0x40
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fb09 	bl	80040b6 <TIM_ITRx_SetConfig>
      break;
 8003aa4:	e00c      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	f000 fb00 	bl	80040b6 <TIM_ITRx_SetConfig>
      break;
 8003ab6:	e003      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
      break;
 8003abc:	e000      	b.n	8003ac0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003abe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
	...

08003b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a46      	ldr	r2, [pc, #280]	@ (8003c6c <TIM_Base_SetConfig+0x12c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d013      	beq.n	8003b80 <TIM_Base_SetConfig+0x40>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5e:	d00f      	beq.n	8003b80 <TIM_Base_SetConfig+0x40>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a43      	ldr	r2, [pc, #268]	@ (8003c70 <TIM_Base_SetConfig+0x130>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00b      	beq.n	8003b80 <TIM_Base_SetConfig+0x40>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a42      	ldr	r2, [pc, #264]	@ (8003c74 <TIM_Base_SetConfig+0x134>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d007      	beq.n	8003b80 <TIM_Base_SetConfig+0x40>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a41      	ldr	r2, [pc, #260]	@ (8003c78 <TIM_Base_SetConfig+0x138>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d003      	beq.n	8003b80 <TIM_Base_SetConfig+0x40>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a40      	ldr	r2, [pc, #256]	@ (8003c7c <TIM_Base_SetConfig+0x13c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d108      	bne.n	8003b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a35      	ldr	r2, [pc, #212]	@ (8003c6c <TIM_Base_SetConfig+0x12c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d02b      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ba0:	d027      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a32      	ldr	r2, [pc, #200]	@ (8003c70 <TIM_Base_SetConfig+0x130>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d023      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a31      	ldr	r2, [pc, #196]	@ (8003c74 <TIM_Base_SetConfig+0x134>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d01f      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a30      	ldr	r2, [pc, #192]	@ (8003c78 <TIM_Base_SetConfig+0x138>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01b      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a2f      	ldr	r2, [pc, #188]	@ (8003c7c <TIM_Base_SetConfig+0x13c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d017      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a2e      	ldr	r2, [pc, #184]	@ (8003c80 <TIM_Base_SetConfig+0x140>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a2d      	ldr	r2, [pc, #180]	@ (8003c84 <TIM_Base_SetConfig+0x144>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00f      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a2c      	ldr	r2, [pc, #176]	@ (8003c88 <TIM_Base_SetConfig+0x148>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00b      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a2b      	ldr	r2, [pc, #172]	@ (8003c8c <TIM_Base_SetConfig+0x14c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d007      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a2a      	ldr	r2, [pc, #168]	@ (8003c90 <TIM_Base_SetConfig+0x150>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d003      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a29      	ldr	r2, [pc, #164]	@ (8003c94 <TIM_Base_SetConfig+0x154>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d108      	bne.n	8003c04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a10      	ldr	r2, [pc, #64]	@ (8003c6c <TIM_Base_SetConfig+0x12c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d003      	beq.n	8003c38 <TIM_Base_SetConfig+0xf8>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a12      	ldr	r2, [pc, #72]	@ (8003c7c <TIM_Base_SetConfig+0x13c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d103      	bne.n	8003c40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d105      	bne.n	8003c5e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f023 0201 	bic.w	r2, r3, #1
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	611a      	str	r2, [r3, #16]
  }
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	40000400 	.word	0x40000400
 8003c74:	40000800 	.word	0x40000800
 8003c78:	40000c00 	.word	0x40000c00
 8003c7c:	40010400 	.word	0x40010400
 8003c80:	40014000 	.word	0x40014000
 8003c84:	40014400 	.word	0x40014400
 8003c88:	40014800 	.word	0x40014800
 8003c8c:	40001800 	.word	0x40001800
 8003c90:	40001c00 	.word	0x40001c00
 8003c94:	40002000 	.word	0x40002000

08003c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f023 0201 	bic.w	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0303 	bic.w	r3, r3, #3
 8003cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f023 0302 	bic.w	r3, r3, #2
 8003ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a20      	ldr	r2, [pc, #128]	@ (8003d70 <TIM_OC1_SetConfig+0xd8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d003      	beq.n	8003cfc <TIM_OC1_SetConfig+0x64>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8003d74 <TIM_OC1_SetConfig+0xdc>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d10c      	bne.n	8003d16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f023 0308 	bic.w	r3, r3, #8
 8003d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f023 0304 	bic.w	r3, r3, #4
 8003d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a15      	ldr	r2, [pc, #84]	@ (8003d70 <TIM_OC1_SetConfig+0xd8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d003      	beq.n	8003d26 <TIM_OC1_SetConfig+0x8e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a14      	ldr	r2, [pc, #80]	@ (8003d74 <TIM_OC1_SetConfig+0xdc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d111      	bne.n	8003d4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	621a      	str	r2, [r3, #32]
}
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	40010000 	.word	0x40010000
 8003d74:	40010400 	.word	0x40010400

08003d78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	f023 0210 	bic.w	r2, r3, #16
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	021b      	lsls	r3, r3, #8
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f023 0320 	bic.w	r3, r3, #32
 8003dc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a22      	ldr	r2, [pc, #136]	@ (8003e5c <TIM_OC2_SetConfig+0xe4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d003      	beq.n	8003de0 <TIM_OC2_SetConfig+0x68>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a21      	ldr	r2, [pc, #132]	@ (8003e60 <TIM_OC2_SetConfig+0xe8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d10d      	bne.n	8003dfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a17      	ldr	r2, [pc, #92]	@ (8003e5c <TIM_OC2_SetConfig+0xe4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d003      	beq.n	8003e0c <TIM_OC2_SetConfig+0x94>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a16      	ldr	r2, [pc, #88]	@ (8003e60 <TIM_OC2_SetConfig+0xe8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d113      	bne.n	8003e34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	621a      	str	r2, [r3, #32]
}
 8003e4e:	bf00      	nop
 8003e50:	371c      	adds	r7, #28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	40010000 	.word	0x40010000
 8003e60:	40010400 	.word	0x40010400

08003e64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0303 	bic.w	r3, r3, #3
 8003e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a21      	ldr	r2, [pc, #132]	@ (8003f44 <TIM_OC3_SetConfig+0xe0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_OC3_SetConfig+0x66>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a20      	ldr	r2, [pc, #128]	@ (8003f48 <TIM_OC3_SetConfig+0xe4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d10d      	bne.n	8003ee6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a16      	ldr	r2, [pc, #88]	@ (8003f44 <TIM_OC3_SetConfig+0xe0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d003      	beq.n	8003ef6 <TIM_OC3_SetConfig+0x92>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a15      	ldr	r2, [pc, #84]	@ (8003f48 <TIM_OC3_SetConfig+0xe4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d113      	bne.n	8003f1e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	621a      	str	r2, [r3, #32]
}
 8003f38:	bf00      	nop
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	40010000 	.word	0x40010000
 8003f48:	40010400 	.word	0x40010400

08003f4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	021b      	lsls	r3, r3, #8
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	031b      	lsls	r3, r3, #12
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a12      	ldr	r2, [pc, #72]	@ (8003ff0 <TIM_OC4_SetConfig+0xa4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <TIM_OC4_SetConfig+0x68>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a11      	ldr	r2, [pc, #68]	@ (8003ff4 <TIM_OC4_SetConfig+0xa8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d109      	bne.n	8003fc8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	019b      	lsls	r3, r3, #6
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	621a      	str	r2, [r3, #32]
}
 8003fe2:	bf00      	nop
 8003fe4:	371c      	adds	r7, #28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	40010400 	.word	0x40010400

08003ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f023 0201 	bic.w	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f023 030a 	bic.w	r3, r3, #10
 8004034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	621a      	str	r2, [r3, #32]
}
 800404a:	bf00      	nop
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004056:	b480      	push	{r7}
 8004058:	b087      	sub	sp, #28
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	f023 0210 	bic.w	r2, r3, #16
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004080:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	031b      	lsls	r3, r3, #12
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004092:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b085      	sub	sp, #20
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f043 0307 	orr.w	r3, r3, #7
 80040d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	609a      	str	r2, [r3, #8]
}
 80040e0:	bf00      	nop
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004106:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	021a      	lsls	r2, r3, #8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	431a      	orrs	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4313      	orrs	r3, r2
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	4313      	orrs	r3, r2
 8004118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	609a      	str	r2, [r3, #8]
}
 8004120:	bf00      	nop
 8004122:	371c      	adds	r7, #28
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	2201      	movs	r2, #1
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1a      	ldr	r2, [r3, #32]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	43db      	mvns	r3, r3
 800414e:	401a      	ands	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a1a      	ldr	r2, [r3, #32]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	431a      	orrs	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
	...

08004178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800418c:	2302      	movs	r3, #2
 800418e:	e05a      	b.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a21      	ldr	r2, [pc, #132]	@ (8004254 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d022      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041dc:	d01d      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004258 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d018      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1b      	ldr	r2, [pc, #108]	@ (800425c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00e      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a18      	ldr	r2, [pc, #96]	@ (8004264 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d009      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a17      	ldr	r2, [pc, #92]	@ (8004268 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d004      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a15      	ldr	r2, [pc, #84]	@ (800426c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d10c      	bne.n	8004234 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004220:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	4313      	orrs	r3, r2
 800422a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40010000 	.word	0x40010000
 8004258:	40000400 	.word	0x40000400
 800425c:	40000800 	.word	0x40000800
 8004260:	40000c00 	.word	0x40000c00
 8004264:	40010400 	.word	0x40010400
 8004268:	40014000 	.word	0x40014000
 800426c:	40001800 	.word	0x40001800

08004270 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <memset>:
 8004298:	4402      	add	r2, r0
 800429a:	4603      	mov	r3, r0
 800429c:	4293      	cmp	r3, r2
 800429e:	d100      	bne.n	80042a2 <memset+0xa>
 80042a0:	4770      	bx	lr
 80042a2:	f803 1b01 	strb.w	r1, [r3], #1
 80042a6:	e7f9      	b.n	800429c <memset+0x4>

080042a8 <__libc_init_array>:
 80042a8:	b570      	push	{r4, r5, r6, lr}
 80042aa:	4d0d      	ldr	r5, [pc, #52]	@ (80042e0 <__libc_init_array+0x38>)
 80042ac:	4c0d      	ldr	r4, [pc, #52]	@ (80042e4 <__libc_init_array+0x3c>)
 80042ae:	1b64      	subs	r4, r4, r5
 80042b0:	10a4      	asrs	r4, r4, #2
 80042b2:	2600      	movs	r6, #0
 80042b4:	42a6      	cmp	r6, r4
 80042b6:	d109      	bne.n	80042cc <__libc_init_array+0x24>
 80042b8:	4d0b      	ldr	r5, [pc, #44]	@ (80042e8 <__libc_init_array+0x40>)
 80042ba:	4c0c      	ldr	r4, [pc, #48]	@ (80042ec <__libc_init_array+0x44>)
 80042bc:	f000 f818 	bl	80042f0 <_init>
 80042c0:	1b64      	subs	r4, r4, r5
 80042c2:	10a4      	asrs	r4, r4, #2
 80042c4:	2600      	movs	r6, #0
 80042c6:	42a6      	cmp	r6, r4
 80042c8:	d105      	bne.n	80042d6 <__libc_init_array+0x2e>
 80042ca:	bd70      	pop	{r4, r5, r6, pc}
 80042cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80042d0:	4798      	blx	r3
 80042d2:	3601      	adds	r6, #1
 80042d4:	e7ee      	b.n	80042b4 <__libc_init_array+0xc>
 80042d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042da:	4798      	blx	r3
 80042dc:	3601      	adds	r6, #1
 80042de:	e7f2      	b.n	80042c6 <__libc_init_array+0x1e>
 80042e0:	08004320 	.word	0x08004320
 80042e4:	08004320 	.word	0x08004320
 80042e8:	08004320 	.word	0x08004320
 80042ec:	08004324 	.word	0x08004324

080042f0 <_init>:
 80042f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f2:	bf00      	nop
 80042f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f6:	bc08      	pop	{r3}
 80042f8:	469e      	mov	lr, r3
 80042fa:	4770      	bx	lr

080042fc <_fini>:
 80042fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fe:	bf00      	nop
 8004300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004302:	bc08      	pop	{r3}
 8004304:	469e      	mov	lr, r3
 8004306:	4770      	bx	lr
